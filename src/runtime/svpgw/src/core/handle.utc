/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

              * * * * ! SVP S-Net Graph Walker Runtime ! * * * *

                  Computer Systems Architecture (CSA) Group
                            Informatics Institute
                        University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : handle.utc

    File Type      : Code File

    ---------------------------------------

    File 
    Description    :

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/

#include "handle.int.utc.h"
#include "typeencode.int.utc.h"

#include "memmng.int.utc.h"
#include "plcmng.int.utc.h"

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void SNetHndInit(
    snet_handle_t                   *hnd,
    snet_hnd_cast_fptr_t             cast_fun,
    snet_hnd_recget_fptr_t           recget_fun,
    snet_hnd_boxsignget_fptr_t       boxsignget_fun,
    snet_hnd_snetdhostplcget_fptr_t  snetdhostplcget_fun)
{
    assert(hnd != NULL);
    assert(cast_fun != NULL);

    SNetBaseTypeInit(&hnd->base);
    SNetBaseTypeSetPlacesDefault(&hnd->base);

    hnd->out_rec                  = NULL;
    hnd->vtbl.cast_fun            = cast_fun;
    hnd->vtbl.recget_fun          = recget_fun;
    hnd->vtbl.boxsignget_fun      = boxsignget_fun;
    hnd->vtbl.snetdhostplcget_fun = snetdhostplcget_fun;
}

/*----------------------------------------------------------------------------*/

void SNetHndDispose(snet_handle_t *hnd)
{
    assert(hnd != NULL);
    SNetBaseTypeDispose(&hnd->base);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

snet_record_t*
SNetHndGetRecord(const snet_handle_t *hnd)
{
    assert(hnd != NULL);

    hnd = (const snet_handle_t *) SNetUnmaskPointer(hnd);

    assert(hnd->vtbl.cast_fun != NULL);
    assert(hnd->vtbl.recget_fun != NULL);

    return (*hnd->vtbl.recget_fun)((*hnd->vtbl.cast_fun)(hnd));
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

snet_record_t*
SNetHndGetOutRecord(const snet_handle_t *hnd)
{
    assert(hnd != NULL);
    return hnd->out_rec;
}

void
SNetHndSetOutRecord(snet_handle_t *hnd, snet_record_t *rec)
{
    assert(hnd != NULL);
    hnd->out_rec = rec;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void*
SNetHndCastToDerivedHandle(const snet_handle_t *hnd)
{
    assert(hnd != NULL);
    assert(hnd->vtbl.cast_fun != NULL);

    return (*hnd->vtbl.cast_fun)(hnd);
}

const snet_box_sign_t*
SNetHndGetBoxSignature(const snet_handle_t *hnd)
{
    assert(hnd != NULL);
    assert(hnd->vtbl.cast_fun != NULL);
    assert(hnd->vtbl.boxsignget_fun != NULL);

    return (*hnd->vtbl.boxsignget_fun)((*hnd->vtbl.cast_fun)(hnd));
}

snet_place_t
SNetHndGetNetDomainHostPlace(const snet_handle_t *hnd)
{
    assert(hnd != NULL);
    assert(hnd->vtbl.cast_fun != NULL);
    assert(hnd->vtbl.snetdhostplcget_fun != NULL);

    return (*hnd->vtbl.snetdhostplcget_fun)((*hnd->vtbl.cast_fun)(hnd));
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

snet_variantencoding_t*
SNetHndCreateVEncForOutRecord(
    const snet_handle_t *hnd, unsigned int variant_idx)
{
     assert(hnd != NULL);
 
     const snet_box_sign_t *tsign = SNetHndGetBoxSignature(hnd);
 
     if (tsign == NULL) {
         return NULL;
     }
 
     snet_typeencoding_t *tenc =
         SNetTencBoxSignGetType(tsign);
 
     assert(tenc != NULL);
 
     if (variant_idx >= SNetTencTypeGetVariantsCount(tenc)) {
         return NULL;
     }
 
     return SNetTencVariantCreateCopy(
         SNetTencTypeGetVariant(tenc, variant_idx));
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

snet_base_t* 
SNetHndToBase(snet_handle_t *hnd)
{
    assert(hnd != NULL); return &hnd->base;
}

const snet_base_t*
SNetHndToBaseConst(const snet_handle_t *hnd)
{
    assert(hnd != NULL); return &hnd->base;
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

