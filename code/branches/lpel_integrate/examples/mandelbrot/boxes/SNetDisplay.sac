module SNetDisplay;

use Color8: all;
use Array: {*, +, <, ++};

provide all;

external typedef SDLdisplay;

SDLdisplay initDisplay( int[2] shp)
{
  return( initDisplay( shp[0], shp[1], true));
}

external SDLdisplay initDisplay( int x, int y, bool async);
#pragma linkobj "src/initDisplay.o"
#pragma linkwith "SDL"
#pragma refcounting [3]
#pragma linksign [0,1,2,3]

external void destroyDisplay( SDLdisplay disp);
#pragma linkobj "src/destroyDisplay.o"
#pragma linkwith "SDL"

external SDLdisplay drawArray( SDLdisplay disp, color[.,.] array);
#pragma linkobj "src/drawArray.o"
#pragma linkwith "SDL"
#pragma linksign [0,1,2]
#pragma refcounting [2]

external SDLdisplay drawArrayOffset( SDLdisplay disp, color[.,.] array, 
                                     int[2] pic_offset);
#pragma linkobj "src/drawArrayOffset.o"
#pragma linkwith "SDL"
#pragma linksign [0,1,2,3]
#pragma refcounting [2]

external SDLdisplay drawPixel( SDLdisplay disp, int[.] idx, color val);
#pragma linkobj "src/drawPixel.o"
#pragma linkwith "SDL"
#pragma refcounting [1,2]

SDLdisplay drawAt( SDLdisplay disp, int[2] offset, color[.,.] array){
  for ( i = 0; i < shape(array)[0]; i++){
    for ( j = 0; j < shape(array)[1]; j++){
      disp = drawPixel( disp, [i,j]+offset, array[i,j]);
    }
  }
  return( disp);
}
