#include "tsboxes.utc.h"

/*----------------------------------------------------------------------------*/

int SNetCall__A(snet_handle_t *hnd, void *field_a)
{
    field_a = SNetRecFieldGetData(field_a);

    if (field_a == NULL) {
#ifdef PRINT_STDOUT  
        printf(
            "Executing box A "
            "(invalid field values; emitting no records)\n");
#endif
        return 0;
    }

    int *res = (int *) malloc(sizeof(int));

    (*res) = (*((int *) field_a));

    for (unsigned int i=0; i < LOAD_THRESSHOLD; i++) {
        (*res) = 2 * (*res);
    }

    double d = (double) (*res);

    for (int i=0; i < (*res) % LOAD_THRESSHOLD; i++) {
        d = (double) d / 2.1;
    }

    (*res) = (int) d;

    if (rand() % 10 > 5) {
#ifdef PRINT_STDOUT  
        printf(
            "Executing box A "
            "(a=%d ==> venc_idx=0, b=%d)\n",
            *((int *) field_a), *res);
#endif

        SNetOutRaw(hnd, 0, 1, res);

    } else {
#ifdef PRINT_STDOUT  
        printf(
            "Executing box A "
            "(a=%d ==> venc_idx=1, b=%d, <T>=0)\n",
            *((int *) field_a), *res);
#endif

        SNetOutRaw(hnd, 0, 2, res, 1);
    }

    return 0;
}

/*----------------------------------------------------------------------------*/

int SNetCall__B(snet_handle_t *hnd, void *field_b)
{
    field_b = SNetRecFieldGetData(field_b);

    if (field_b == NULL) {
#ifdef PRINT_STDOUT  
        printf(
            "Executing box B "
            "(invalid field values; emitting no records)\n");
#endif
        return 0;
    }

    int *res = (int *) malloc(sizeof(int));

    (*res) = (*((int *) field_b));

    for (int i=0; i < LOAD_THRESSHOLD; i++) {
        (*res) = 2 * (*res);
    }

    double d = (double) (*res);

    for (int i=0; i < (*res) % LOAD_THRESSHOLD; i++) {
        d = (double) d / 2.1;
    }

    (*res) = (int) d;

    if (rand() % 10 > 5) {
        //(*res) = 2 * (*((int *) field_b));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box B "
            "(b=%d ==> venc_idx=0, c=%d)\n",
            *((int *) field_b), *res);
#endif

        SNetOutRaw(hnd, 0, 1, res);

    } else {
        //(*res) = 10 * (*((int *) field_b));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box B "
            "(b=%d ==> venc_idx=1, d=%d)\n",
            *((int *) field_b), *res);
#endif

        SNetOutRaw(hnd, 0, 2, res);
    }

    return 0;
}

/*----------------------------------------------------------------------------*/

int SNetCall__C(snet_handle_t *hnd, void *field_c)
{
    field_c = SNetRecFieldGetData(field_c);

    if (field_c == NULL) {
#ifdef PRINT_STDOUT  
        printf(
            "Executing box C "
            "(invalid field values; emitting no records)\n");
#endif
        return 0;
    }

    int *res = (int *) malloc(sizeof(int));

    (*res) = (*((int *) field_c));

    for (int i=0; i < LOAD_THRESSHOLD; i++) {
        (*res) = 2 * (*res);
    }

    double d = (double) (*res);

    for (int i=0; i < (*res) % LOAD_THRESSHOLD; i++) {
        d = (double) d / 2.1;
    }

    (*res) = (int) d;

    if (rand() % 10 > 3) {
        //(*res) = 100 * (*((int *) field_c));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box C "
            "(c=%d ==> venc_idx=0, b=%d)\n",
            *((int *) field_c), *res);
#endif

        SNetOutRaw(hnd, 0, 1, res);

    } else if (rand() % 10 > 6) {
        //(*res) = 1000 * (*((int *) field_c));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box C "
            "(c=%d ==> venc_idx=1, b=%d, <T>=10)\n",
            *((int *) field_c), *res);
#endif

        SNetOutRaw(hnd, 0, 2, res, T + (int) rand() % 10);

    } else {
        int  t_tag = T + (int) rand() % 10;
        int *res1  = (int *) malloc(sizeof(int));

        //(*res)  = 10000 * (*((int *) field_c));
        (*res1) = 100   * (*((int *) field_c));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box C "
            "(d=%d ==> venc_idx=2, b=%d, e=%d, <T>=%d)\n",
            *((int *) field_c), *res, *res1, t_tag);
#endif

        SNetOutRaw(hnd, 0, 3, res, res1, t_tag);
    }

    return 0;
}

/*----------------------------------------------------------------------------*/

int SNetCall__D(snet_handle_t *hnd, void *field_d)
{
    field_d = SNetRecFieldGetData(field_d);

    if (field_d == NULL) {
#ifdef PRINT_STDOUT  
        printf(
            "Executing box D "
            "(invalid field values; emitting no records)\n");
#endif
        return 0;
    }

    int *res = (int *) malloc(sizeof(int));

    (*res) = (*((int *) field_d));

    for (unsigned int i=0; i < LOAD_THRESSHOLD; i++) {
        (*res) = 2 * (*res);
    }

    double d = (double) (*res);

    for (int i=0; i < (*res) % LOAD_THRESSHOLD; i++) {
        d = (double) d / 2.1;
    }

    (*res) = (int) d;

    if (rand() % 10 > 3) {
        //(*res) = 100 * (*((int *) field_d));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box D "
            "(d=%d ==> venc_idx=0, b=%d)\n",
            *((int *) field_d), *res);
#endif

        SNetOutRaw(hnd, 0, 1, res);
    } else if (rand() % 10 > 6) {
        //(*res) = 1000 * (*((int *) field_d));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box D "
            "(d=%d ==> venc_idx=1, b(1)=%d, ",
            *((int *) field_d), *res);
#endif

        SNetOutRaw(hnd, 0, 2, res, T + (int) rand() % 10);

        // unsigned int out_recs_cnt = 0; 
        unsigned int out_recs_cnt = (unsigned int) rand() % 4;

        for (unsigned int i=0; i < out_recs_cnt + 1; i++) {
            int *resi  = (int *) malloc(sizeof(int));

            (*resi) = (i * 100) * (*((int *) field_d));

#ifdef PRINT_STDOUT  
            printf("b(%u)=%d,", i + 1, *resi);

            if (i < out_recs_cnt) {
                printf(", ");
            }
#endif

            SNetOutRaw(hnd, 0, 2, resi, T + (int) rand() % 10);
        }

#ifdef PRINT_STDOUT  
        printf(")\n");
#endif

    } else {
        int  t_tag = T + (int) rand() % 20;

        if (t_tag > 9)
            t_tag = (-t_tag);

        int *res1  = (int *) malloc(sizeof(int));

        //(*res)  = 10000 * (*((int *) field_d));
        (*res1) = 100   * (*((int *) field_d));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box D "
            "(d=%d ==> venc_idx=2, b=%d, e=%d, <T>=%d)\n",
            *((int *) field_d), *res, *res1, t_tag);
#endif

        SNetOutRaw(hnd, 0, 3, res, res1, t_tag);
    }

    return 0;
}

/*----------------------------------------------------------------------------*/

int SNetCall__E(snet_handle_t *hnd, void *field_e)
{
    field_e = SNetRecFieldGetData(field_e);

    static volatile unsigned int exec_cnt = 0;

    if (field_e == NULL) {
#ifdef PRINT_STDOUT  
        printf(
            "Executing box E "
            "(invalid field values; emitting no records)\n");
#endif
        return 0;
    }

    int *res = (int *) malloc(sizeof(int));

    (*res) = (*((int *) field_e));

    for (unsigned int i=0; i < LOAD_THRESSHOLD; i++) {
        (*res) = 2 * (*res);
    }

    double d = (double) (*res);

    for (int i=0; i < (*res) % LOAD_THRESSHOLD; i++) {
        d = (double) d / 2.1;
    }

    (*res) = (int) d;

    if (exec_cnt % 2 == 0) {
        //(*res) = 2 * (*((int *) field_e));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box E "
            "(e=%d ==> venc_idx=0, e=%d)\n",
            *((int *) field_e), *res);
#endif

        SNetOutRaw(hnd, 0, 1, res);

    } else {
    //(*res) = 10 * (*((int *) field_e));

#ifdef PRINT_STDOUT  
        printf(
            "Executing box E "
            "(e=%d ==> venc_idx=1, f=%d)\n",
            *((int *) field_e), *res);
#endif

        SNetOutRaw(hnd, 0, 2, res);
    }

    exec_cnt++;

    return 0;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

