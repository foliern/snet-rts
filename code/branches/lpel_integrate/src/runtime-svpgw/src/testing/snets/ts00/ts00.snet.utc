/**
 * @file ts00.c
 *
 * Source code of compiled snet-file for runtime.
 *
 * THIS FILE HAS BEEN GENERATED.
 * DO NOT EDIT THIS FILE.
 * EDIT THE ORIGINAL SNET-SOURCE FILE ts00.snet INSTEAD!
 *
 * ALL CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN!
 *
*/

#include "tsboxes.utc.h"

#include "ts00.h"
#include "networkinterface.h"

char *snet_ts00_labels[] = {
	"E__ts00__None",
	"a",
	"b",
	"e",
	"c",
	"d",
	"T"};

char *snet_ts00_interfaces[] = {};


static void SNet__ts00__A(snet_handle_t *hnd)
{
  snet_record_t *rec = NULL;
  void *field_a = NULL;

  rec = SNetHndGetRecord(hnd);

  field_a = SNetRecTakeField(rec, F__ts00__a);

  SNetCall__A(hnd, field_a);
}


static void SNet__ts00__B(snet_handle_t *hnd)
{
  snet_record_t *rec = NULL;
  void *field_b = NULL;

  rec = SNetHndGetRecord(hnd);

  field_b = SNetRecTakeField(rec, F__ts00__b);

  SNetCall__B(hnd, field_b);
}


static void SNet__ts00__C(snet_handle_t *hnd)
{
  snet_record_t *rec = NULL;
  void *field_c = NULL;

  rec = SNetHndGetRecord(hnd);

  field_c = SNetRecTakeField(rec, F__ts00__c);

  SNetCall__C(hnd, field_c);
}


static void SNet__ts00__D(snet_handle_t *hnd)
{
  snet_record_t *rec = NULL;
  void *field_d = NULL;

  rec = SNetHndGetRecord(hnd);

  field_d = SNetRecTakeField(rec, F__ts00__d);

  SNetCall__D(hnd, field_d);
}

static snet_tl_stream_t *SNet__ts00___SL(snet_tl_stream_t *in_buf)
{
  snet_tl_stream_t *out_buf = NULL;
  snet_typeencoding_t *out_type = NULL;
  snet_box_sign_t *out_sign = NULL;

  out_type = SNetTencTypeEncode(2, 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__b), 
                SNetTencCreateVector(0), 
                SNetTencCreateVector(0)), 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__b), 
                SNetTencCreateVector(1, T__ts00__T), 
                SNetTencCreateVector(0)));


  out_sign = SNetTencBoxSignEncode( out_type, 
              SNetTencCreateVector(1, field), 
              SNetTencCreateVector(2, field, tag));


  out_buf = SNetBox(in_buf, "A", 
              &SNet__ts00__A, 
              out_sign);

  return (out_buf);
}

static snet_tl_stream_t *SNet__ts00___SR___SL(snet_tl_stream_t *in_buf)
{
  snet_tl_stream_t *out_buf = NULL;
  snet_typeencoding_t *out_type = NULL;
  snet_box_sign_t *out_sign = NULL;

  out_type = SNetTencTypeEncode(2, 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__c), 
                SNetTencCreateVector(0), 
                SNetTencCreateVector(0)), 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__d), 
                SNetTencCreateVector(0), 
                SNetTencCreateVector(0)));


  out_sign = SNetTencBoxSignEncode( out_type, 
              SNetTencCreateVector(1, field), 
              SNetTencCreateVector(1, field));


  out_buf = SNetBox(in_buf, "B", 
              &SNet__ts00__B, 
              out_sign);

  return (out_buf);
}

static snet_tl_stream_t *SNet__ts00___SR___SR___P1(snet_tl_stream_t *in_buf)
{
  snet_tl_stream_t *out_buf = NULL;
  snet_typeencoding_t *out_type = NULL;
  snet_box_sign_t *out_sign = NULL;

  out_type = SNetTencTypeEncode(3, 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__b), 
                SNetTencCreateVector(0), 
                SNetTencCreateVector(0)), 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__b), 
                SNetTencCreateVector(1, T__ts00__T), 
                SNetTencCreateVector(0)), 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__e), 
                SNetTencCreateVector(1, T__ts00__T), 
                SNetTencCreateVector(0)));


  out_sign = SNetTencBoxSignEncode( out_type, 
              SNetTencCreateVector(1, field), 
              SNetTencCreateVector(2, field, tag), 
              SNetTencCreateVector(2, field, tag));


  out_buf = SNetBox(in_buf, "C", 
              &SNet__ts00__C, 
              out_sign);

  return (out_buf);
}

static snet_tl_stream_t *SNet__ts00___SR___SR___P2(snet_tl_stream_t *in_buf)
{
  snet_tl_stream_t *out_buf = NULL;
  snet_typeencoding_t *out_type = NULL;
  snet_box_sign_t *out_sign = NULL;

  out_type = SNetTencTypeEncode(3, 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__b), 
                SNetTencCreateVector(0), 
                SNetTencCreateVector(0)), 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__b), 
                SNetTencCreateVector(1, T__ts00__T), 
                SNetTencCreateVector(0)), 
              SNetTencVariantEncode(
                SNetTencCreateVector(1, F__ts00__e), 
                SNetTencCreateVector(1, T__ts00__T), 
                SNetTencCreateVector(0)));


  out_sign = SNetTencBoxSignEncode( out_type, 
              SNetTencCreateVector(1, field), 
              SNetTencCreateVector(2, field, tag), 
              SNetTencCreateVector(2, field, tag));


  out_buf = SNetBox(in_buf, "D", 
              &SNet__ts00__D, 
              out_sign);

  return (out_buf);
}

static snet_tl_stream_t *SNet__ts00___SR___SR(snet_tl_stream_t *in_buf)
{
  snet_tl_stream_t *out_buf = NULL;

  out_buf = SNetParallelDet(in_buf, 
              SNetTencCreateTypeEncodingList(2, 
                SNetTencTypeEncode(1, 
                  SNetTencVariantEncode(
                    SNetTencCreateVector(1, F__ts00__c), 
                    SNetTencCreateVector(0), 
                    SNetTencCreateVector(0))), 
                SNetTencTypeEncode(1, 
                  SNetTencVariantEncode(
                    SNetTencCreateVector(1, F__ts00__d), 
                    SNetTencCreateVector(0), 
                    SNetTencCreateVector(0)))), 
              &SNet__ts00___SR___SR___P1, 
              &SNet__ts00___SR___SR___P2);

  return (out_buf);
}

static snet_tl_stream_t *SNet__ts00___SR(snet_tl_stream_t *in_buf)
{
  snet_tl_stream_t *out_buf = NULL;

  out_buf = SNetSerial(in_buf, 
              &SNet__ts00___SR___SL, 
              &SNet__ts00___SR___SR);

  return (out_buf);
}

snet_tl_stream_t *SNet__ts00___ts00(snet_tl_stream_t *in_buf)
{
  snet_tl_stream_t *out_buf = NULL;

  out_buf = SNetSerial(in_buf, 
              &SNet__ts00___SL, 
              &SNet__ts00___SR);

  return (out_buf);
}

