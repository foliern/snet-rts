/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

              * * * * ! SVP S-Net Graph Walker Runtime ! * * * *

                  Computer Systems Architecture (CSA) Group
                            Informatics Institute
                        University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : gwdebug.utc

    File Type      : Code File

    ---------------------------------------

    File 
    Description    :

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/

#include "gwdebug.int.utc.h"

#include "graph.int.utc.h"
#include "graphstructs.int.utc.h"

#include "idxvec.int.utc.h"
#include "gwhandle.int.utc.h"

/*---*/

#include "core/record.int.utc.h"
#include "core/typeencode.int.utc.h"

/*---*/

#include <stdio.h>
#include <stdarg.h>

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * String representations of the different states 
 * a cons-node can be.
 */

static const char *CNODE_STATE_STR[] = {
    "INIT", // INIT
    "WLK",  // WALKING
    "WSC",  // WAIT_SYNCCELL
    "WRP"   // WAIT_REORDER_POINT
};

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static snet_idxvec_t* 
conslst_node_gidx(snet_conslst_node_t *cnode)
{
    snet_idxvec_t *dyn_idx = SNetConsLstNodeGetDynGIdx(cnode);
    snet_gnode_t  *gnode   = SNetConsLstNodeGetGraphNode(cnode);

    if (gnode == NULL || gnode->type == GRAPH_NODE_TYPE_NOP) {
        return NULL;
    }

    return (dyn_idx != NULL ? dyn_idx : gnode->data.normal->idx);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void 
SNetGwDebugPrint(snet_conslst_node_t *cnode, const char *fmt, ...)
{
    snet_gwhandle_t *hnd       = SNetConsLstNodeGetHandle(cnode);
    snet_record_t   *cnode_rec = SNetConsLstNodeGetRecord(cnode);

    void *tid  = uTC::GetThreadInfo()->f;
    void *ptid = uTC::GetThreadInfo()->f->get_parent();

    const char *cnode_states = 
        CNODE_STATE_STR[(int)(SNetConsLstNodeGetState(cnode))];

    const char *infinite_idxs = "<inf>";

    const char *cnode_idxs = (
        cnode == NULL || conslst_node_gidx(cnode) == NULL ? 
        NULL : 
        conslst_node_gidx(cnode) == NULL ?
            NULL : 
            SNetIdxVecIsInfinite(conslst_node_gidx(cnode)) ?
                infinite_idxs :
                SNetIdxVecToString(conslst_node_gidx(cnode), NULL));

    const char *cnode_oidxs = (
        cnode == NULL ? 
        NULL : 
        SNetConsLstNodeGetOrdIdx(cnode) == NULL ?
            NULL : 
            SNetIdxVecIsInfinite(SNetConsLstNodeGetOrdIdx(cnode)) ?
                infinite_idxs :
                SNetIdxVecToString(SNetConsLstNodeGetOrdIdx(cnode), NULL));

    const char *cnode_midxs = (
        cnode == NULL ? 
        NULL : 
        SNetConsLstNodeGetMinGIdx(cnode) == NULL ?
            NULL : 
            SNetIdxVecIsInfinite(SNetConsLstNodeGetMinGIdx(cnode)) ?
                infinite_idxs :
                SNetIdxVecToString(SNetConsLstNodeGetMinGIdx(cnode), NULL));

    unsigned int cnode_rec_tags_cnt   = (
        cnode_rec == NULL ?
        0                 : 
        SNetTencVariantGetTagsCount(SNetRecGetVariantEncoding(cnode_rec)));
        
    unsigned int cnode_rec_btags_cnt  = (
        cnode_rec == NULL ?
        0                 :
        SNetTencVariantGetBTagsCount(SNetRecGetVariantEncoding(cnode_rec)));

    unsigned int cnode_rec_fields_cnt = (
        cnode_rec == NULL ?
        0                 :
        SNetTencVariantGetFieldsCount(SNetRecGetVariantEncoding(cnode_rec)));

    va_list  vargs;
    va_start(vargs, fmt);

    char *str = (char *)(SNetMemAlloc(10 + vsnprintf(NULL, 0, fmt, vargs)));

    va_end(vargs);
    va_start(vargs, fmt);

    vsprintf(str, fmt, vargs);

    printf(
        "SNET/GW[tid=%p->%p,\t"
        "cn=(%p:\thnd=%p,\t"
        "s=%s, si=%s, gi=%s, ii=%s, rec(%p: %u, %u, %u))]: %s\n",
        ptid,  tid,
        cnode, hnd, 
        cnode_states, 
        cnode_oidxs, cnode_idxs, cnode_midxs,
        cnode_rec, 
        cnode_rec_tags_cnt, cnode_rec_btags_cnt, cnode_rec_fields_cnt, str);

    va_end(vargs);

    SNetMemFree(str);

    if (cnode_midxs != NULL && cnode_midxs != infinite_idxs) { 
        SNetMemFree((void*) cnode_midxs);
    }

    if (cnode_idxs != NULL && cnode_idxs != infinite_idxs) { 
        SNetMemFree((void*) cnode_idxs);
    }

    if (cnode_oidxs != NULL && cnode_oidxs != infinite_idxs) {
        SNetMemFree((void*) cnode_oidxs);
    }
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

