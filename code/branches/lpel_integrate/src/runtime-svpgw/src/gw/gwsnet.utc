/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

              * * * * ! SVP S-Net Graph Walker Runtime ! * * * *

                  Computer Systems Architecture (CSA) Group
                            Informatics Institute
                        University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : gwsnet.utc

    File Type      : Code File

    ---------------------------------------

    File 
    Description    : This file contains functions for services that apply
                     on a network as a whole.
                     

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/


/*---*/

#include "gw.int.utc.h"
#include "domain.int.utc.h"
#include "gwhandle.int.utc.h"

/*---*/

#include "core/snet.int.utc.h"
#include "core/handle.int.utc.h"
#include "core/buffer.int.utc.h"

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * Network execution management functions
 */

void
SNetKill(snet_domain_t *snetd)
{
    /**
     * Not implemented yet
     */
}

void
SNetSqueeze(snet_domain_t *snetd)
{
    /**
     * Not implemented yet
     */
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * SNetPushIn() function used to insert
 * records to the network.
 */

void
SNetPushIn(snet_domain_t *snetd, snet_record_t *rec)
{
    assert(snetd != NULL);
    assert(rec != NULL);

    snetd = (snet_domain_t *) SNetUnmaskPointer(snetd);

    place  plc = 
        SNetPlaceToUTCPlace(
            SNetDomainGetHostPlace(snetd));

    family fid;

    create (fid; plc; 0; 0; 1; 1;;) 
        SNetGwInit(SNetMemGetRef(snetd), (snet_handle_t *)(NULL), rec);

    sync(fid);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * SNetPopOut() function used to get output
 * records of a network.
 */

static thread void 
read_net_out_buffer(
    snet_buffer_t *buf, shared snet_record_t *out_rec)
{
    out_rec = (snet_record_t *) SNetBufPop(buf);
}

/*----------------------------------------------------------------------------*/

snet_record_t*
SNetPopOut(snet_domain_t *snetd)
{
    assert(snetd != NULL);

    snetd = (snet_domain_t *) SNetUnmaskPointer(snetd);
   
    snet_record_t *rec     = NULL;
    snet_buffer_t *out_buf = SNetDomainGetOutBuffer(snetd);

    if (out_buf == NULL) {
        SNetReportGwWarning(SNET_GWWRN_NULL_NETOUT_BUFF_POP);
        SNetOnWarning();

        return NULL;
    }

    place buf_mutex_plc =
        SNetPlaceToUTCPlace(
            SNetBaseTypeGetMutexPlace(SNetBufToBase(out_buf)));

    family fid;

    create (fid; buf_mutex_plc; 0; 0; 1; 1;;)
        read_net_out_buffer(out_buf, rec);

    sync (fid);
    return (rec);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

unsigned int
SNetGetOutputBufferSize(const snet_domain_t *snetd)
{
    assert(snetd != NULL);

    snetd = (snet_domain_t *) SNetUnmaskPointer(snetd);

    const snet_buffer_t *buf = 
        SNetDomainGetOutBuffer(snetd);

    return (buf == NULL ? 0 : SNetBufGetSize(buf));
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

