#include "tsane.utc.h"

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

DISTRIBUTABLE_DATATYPE(handle_alias);

/*----------------------------------------------------------------------------*/

//thread void foo(int a, int b) __attribute__((weak));
#pragma weak foo
thread void foo(int a, int b)
{ 
    int la = a;
    int lb = b;

    printf("FOO<default>(a=%d, b=%d)\n", la, lb);
}

#pragma weak bar
thread void bar(handle_t *hnd) {}

#pragma weak copy_data
thread void copy_data(snet_ref_t ref, shared void *ptr, shared uint32_t sz) {}

DISTRIBUTABLE_THREAD(foo)(uTC::DataBuffer *db, int& a, int& b)
{
    GINPUT(a);
    GINPUT(b);
}
ASSOCIATE_THREAD(foo);

DISTRIBUTABLE_THREAD(bar)(uTC::DataBuffer *db, handle_t*& hnd)
{
    struct handle_alias hnd_alias;

    if (db->phase() == uTC::ENCODE_INPUT ||
        db->phase() == uTC::ENCODE_OUTPUT) {

        hnd_alias.a = hnd->a;
        hnd_alias.b = hnd->b;
    }

    uTC::transferSyntax(db, &hnd_alias);

    switch (db->phase()) {
        case uTC::DECODE_INPUT:
            hnd = (handle_t *) SNetMemAlloc(sizeof(handle_t));

        case uTC::DECODE_OUTPUT:
            hnd->a = hnd_alias.a;
            hnd->b = hnd_alias.b;

            break;

        case uTC::ENCODE_OUTPUT:
            SNetMemFree(hnd);
            break;

        default: break;
    }
}
ASSOCIATE_THREAD(bar);

/*----------------------------------------------------------------------------*/

#define MAX_DATA_BLOCK_SZ 16384

DISTRIBUTABLE_THREAD(copy_data)(
    uTC::DataBuffer *db,
    snet_ref_t& ref, void**& ptr, uint32_t*& sz)
{
    switch (db->phase()) {
        case uTC::ENCODE_INPUT:
            uTC::transferSyntax(db, &ref);
            return;

        case uTC::DECODE_INPUT:
            uTC::transferSyntax(db, &ref);

            ptr = (void **)    SNetMemAlloc(sizeof(void *));
            sz  = (uint32_t *) SNetMemAlloc(sizeof(uint32_t));

            (*ptr) = NULL;
            (*sz)  = 0;

            return;
    
        case uTC::DECODE_OUTPUT: {
            xdr_uint32_t(&db->xdr, sz);

            unsigned int lsz = (unsigned int)(*sz);
            (*ptr) = SNetMemAlloc((size_t)(*sz));

            xdr_bytes(&db->xdr, (char **) ptr, &lsz, MAX_DATA_BLOCK_SZ);
            break;
        }

        case uTC::ENCODE_OUTPUT: {
            unsigned int lsz = (unsigned int)(*sz);

            xdr_uint32_t(&db->xdr, sz);
            xdr_bytes(&db->xdr, (char **) ptr, &lsz, MAX_DATA_BLOCK_SZ);

            SNetMemFree(*ptr);

            SNetMemFree(ptr);
            SNetMemFree(sz);

            break;
        }

        default: break;
    }
}
ASSOCIATE_THREAD(copy_data);

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

