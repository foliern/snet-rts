#include "ts02.snet.utc.h"
#include "printing.utc.h"

/*---*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <unistd.h>

/*---*/

// #define PRINT_RECS
// #define PRINT_ON_COPY_FREE_FIELD

/*----------------------------------------------------------------------------*/

typedef int field_a_t;
typedef int field_b_t;
typedef int field_c_t;
typedef int field_d_t;
typedef int field_e_t;
typedef int field_f_t;

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static inline unsigned int get_field_byte_size(void *f)
{
    return (unsigned int) sizeof(int);
}

/*----------------------------------------------------------------------------*/

static void free_record_field(void *f)
{
#ifdef PRINT_ON_COPY_FREE_FIELD
    printf("Freeing field %p\n", f);
#endif

    free(f);
}

static void* copy_record_field(void *f)
{
#ifdef PRINT_ON_COPY_FREE_FIELD
    printf("Copying field %p\n", f);
#endif

    unsigned int fsz = get_field_byte_size(f);

    void *new_f = malloc(fsz);

    if (new_f == NULL) {
        fprintf(
            stderr, 
            "!!FATAL ERROR!!: "
            "Failed to allocate memory while copying record field\n");

        abort();
    }

    memcpy(new_f, f, (size_t) fsz);

    return new_f;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static void* create_input_record_type_a_field()
{
    field_a_t *fa = (field_a_t *) malloc(sizeof(field_a_t));

    if (fa == NULL) {
        fprintf(
            stderr, 
            "!!FATAL ERROR!!: "
            "Failed to allocate memory for field\n");

        abort();
    }

    (*fa) = (field_a_t) rand() % 1000;

    return fa;
}

/*----------------------------------------------------------------------------*/

static thread void record_feeder(snet_domain_t *snetd, int max_recs_cnt)
{
    for (int i=0; i < max_recs_cnt; i++) {
        snet_variantencoding_t *venc = 
            SNetTencVariantEncode(
                SNetTencVectorCreate(1, F__ts02__a),
                SNetTencVectorCreate(1, T__ts02__I),
                NULL);

        void          *fa  = create_input_record_type_a_field();
        snet_record_t *rec = SNetDataRecCreate(venc, fa, i);

#ifdef PRINT_RECS
        printf("Pushing record %p: ", rec);
        print_record(rec, snet_test01_labels);
        printf("...");
#endif

        SNetPushIn(snetd, rec);

#ifdef PRINT_RECS
        printf("done (%p)\n", rec);
#endif

        usleep(1);
    }

    printf("Pushing control record carrying termination code!!\n");

    snet_record_t *term_ctrl_rec = 
        SNetCtrlRecCreate(REC_CTRL_MODE_APP, 1, NULL, 0);
 
    SNetPushIn(snetd, term_ctrl_rec);

    printf("Exiting input process!!!\n");
}

/*----------------------------------------------------------------------------*/

static thread void 
write_record_to_stdout(snet_domain_t *snetd, int max_recs_cnt)
{
    snet_record_t *rec     = NULL;
    unsigned int   rec_cnt = 0;

    do {
        rec = SNetPopOut(snetd, false);

        if (rec != NULL) {
            if (SNetRecGetDescription(rec) == REC_DESCR_CTRL) {
                unsigned int opcode = SNetRecGetOpCode(rec);

#ifdef PRINT_RECS
                printf("Popped ctrl record: opcode = %u\n", opcode);
#endif

                SNetRecDestroy(rec);

                if (opcode == 1) {
                    printf("Output process received termination code!!!!\n");
                    break;
                }

                continue;

            } else if (SNetRecGetDescription(rec) == REC_DESCR_DATA) {
#ifdef PRINT_RECS
                printf("Popped record %p: ", rec);
                print_record(rec, snet_test01_labels);
                printf("\n");
#endif

                SNetRecSetDataDisposeMode(rec, REC_DATA_DISPOSE_MODE_ALL);
                SNetRecDestroy(rec);

                rec_cnt++;

            } else {
                printf(
                    "Record of invalid type found (%u)\n", 
                    (unsigned int) SNetRecGetDescription(rec));

                abort();
            }
        }

    } while (true);

    printf("Exiting output process (REC_CNT = %u)!!!\n", rec_cnt);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static int SNet__ts02___run(snet_domain_t *snetd, int test_sz)
{
    int    exit_code;
    family in_proc_fid;
    family out_proc_fid;

    create<root>
        (in_proc_fid; ; 0; 0; 1; 1;;) 
            record_feeder(snetd, test_sz);
    
    create<root>
        (out_proc_fid; ; 0; 0; 1; 1;;) 
            write_record_to_stdout(snetd, test_sz);

    //usleep(20000);
    //kill(in_proc_fid);
    //kill(out_proc_fid);

    exit_code = sync(in_proc_fid);
    printf("Record input process finished (exit_code = %d)!!!\n", exit_code);

    exit_code = sync(out_proc_fid);
    printf("Record output process finished (exit_code = %d)!!!\n", exit_code);

    return 0;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

bool SNet__ts02___setup(snet_domain_t *snetd)
{
    snet_gnode_t *groot = SNetGraphCreate(snetd);

    if (SNet__ts02___ts02(groot) == NULL) {
        return false;
    }

    SNetDomainSetGraph(snetd, groot);

    return true;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

int SNetMain__ts02(int argc, char* argv[])
{
    int ret     = 0;
    int test_sz = 0;

    if (argc == 1) {
        printf(
            "!!S-Net(ts02)!!: WARNING: "
            "Number of test records was not specified; "
            "using default value of 0.\n");

    } else if (argc == 2) {
        char *endptr = NULL;

        test_sz = (int) strtol(argv[1], &endptr, 0);

        if (endptr == argv[1]) {
            printf(
                "!!S-Net(ts02)!!: ERROR: "
                "Invalid number of test records. "
                "using default value of 0.\n");
            
            exit(-1);
        }
    } else {
        printf(
            "!!S-Net(ts02)!!: ERROR: "
            "Invalid argument \"%s\".\n", argv[3]);

        exit(-1);
    }

    // Initialize runtime
    SNetGlobalInitialize();

    SNetGlobalRegisterInterface(
        0, 
        &free_record_field, &copy_record_field, NULL, NULL);

    // Create a new domain
    snet_domain_t *snetd = SNetDomainCreate();

    // Setup network
    if (!SNet__ts02___setup(snetd)) {
        return -1;
    }

    // Run
    ret = SNet__ts02___run(snetd, test_sz);
    
    // Cleanup
    SNetDomainDestroy(snetd);
    SNetGlobalDestroy();

    return ret;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

