#include "ts02.h"
#include "snetcgenhdr.h"

#include "printing.utc.h"

/*---*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <unistd.h>

/*---*/

// #define PRINT_RECS
// #define PRINT_ON_COPY_FREE_FIELD

/*----------------------------------------------------------------------------*/

typedef int field_a_t;
typedef int field_b_t;
typedef int field_c_t;
typedef int field_d_t;
typedef int field_e_t;
typedef int field_f_t;

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static inline unsigned int get_field_byte_size(void *f)
{
    return (unsigned int) sizeof(int);
}

/*----------------------------------------------------------------------------*/

static void free_record_field(void *f)
{
#ifdef PRINT_ON_COPY_FREE_FIELD
    printf("Freeing field %p\n", f);
#endif

    free(f);
}

static void* copy_record_field(void *f)
{
#ifdef PRINT_ON_COPY_FREE_FIELD
    printf("Copying field %p\n", f);
#endif

    unsigned int fsz = get_field_byte_size(f);

    void *new_f = malloc(fsz);

    if (new_f == NULL) {
        fprintf(
            stderr, 
            "!!FATAL ERROR!!: "
            "Failed to allocate memory while copying record field\n");

        abort();
    }

    memcpy(new_f, f, (size_t) fsz);

    return new_f;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static void* create_input_record_type_a_field()
{
    field_a_t *fa = (field_a_t *) malloc(sizeof(field_a_t));

    if (fa == NULL) {
        fprintf(
            stderr, 
            "!!FATAL ERROR!!: "
            "Failed to allocate memory for field\n");

        abort();
    }

    (*fa) = (field_a_t) rand() % 1000;

    return fa;
}

/*----------------------------------------------------------------------------*/

static thread void
net_record_feeder(snet_domain_t *snetd, int max_recs_cnt)
{
    for (int i=0; i < max_recs_cnt; i++) {
        snet_variantencoding_t *venc = 
            SNetTencVariantEncode(
                SNetTencVectorCreate(1, F__ts02__a),
                NULL,
                NULL);

        void          *fa  = create_input_record_type_a_field();
        snet_record_t *rec = SNetDataRecCreate(0, venc, fa);

#ifdef PRINT_RECS
        printf("Pushing record %p: ", rec);
        print_record(rec, snet_ts02_labels);
        printf("...");
#endif

        SNetPushIn(snetd, rec);

#ifdef PRINT_RECS
        printf("done (%p)\n", rec);
#endif

        //usleep(1);
    }

    printf("Exiting input process!!!\n");
}

/*----------------------------------------------------------------------------*/

static thread void
SNet__ts02___out(snet_domain_t *snetd, unsigned int count)
{
    for (unsigned int i=0; i < count; i++) {
        snet_record_t *rec = SNetPopOut(snetd);

        assert(rec != NULL);
        
        if (SNetRecGetDescription(rec) == SNET_REC_DESCR_DATA) {
//#ifdef PRINT_RECS
            printf("Popped record %p: ", rec);
            print_record(rec, snet_ts02_labels);
            printf("\n");
//#endif

        } else if (SNetRecGetDescription(rec) == SNET_REC_DESCR_CTRL) {
#ifdef PRINT_RECS
            printf("Popped ctrl record: opcode = %u\n", SNetRecGetOpCode(rec));
#endif

        } else {
            printf(
                "Record of invalid type found (%u)\n", 
                (unsigned int) SNetRecGetDescription(rec));

            abort();
        }

        SNetRecDestroy(rec);
    }
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static int SNet__ts02___run(snet_domain_t *snetd, int test_sz)
{
    family fid;

    create<root> (fid; ; 0; 0; 1; 1;;) 
        net_record_feeder(snetd, test_sz);

    int exit_code = sync(fid);
    printf("Record input process finished (exit_code = %d)!!!\n", exit_code);
    
    return exit_code;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

snet_domain_t* 
SNetSetup__ts02()
{
    return SNetDomainCreate(&SNet__ts02___ts02, &SNet__ts02___out);
}

int SNetMain__ts02(int argc, char* argv[])
{
    int ret     = 0;
    int test_sz = 0;

    if (argc == 1) {
        printf(
            "!!S-Net(ts02)!!: WARNING: "
            "Number of test records was not specified; "
            "using default value of 0.\n");

    } else if (argc == 2) {
        char *endptr = NULL;

        test_sz = (int) strtol(argv[1], &endptr, 0);

        if (endptr == argv[1]) {
            printf(
                "!!S-Net(ts02)!!: ERROR: "
                "Invalid number of test records. "
                "using default value of 0.\n");
            
            exit(-1);
        }
    } else {
        printf(
            "!!S-Net(ts02)!!: ERROR: "
            "Invalid argument \"%s\".\n", argv[3]);

        exit(-1);
    }

    // Initialize runtime
    SNetGlobalInitialize();

    SNetGlobalRegisterInterface(
        0, 
        &free_record_field, &copy_record_field, NULL, NULL);

    // Setup network =>  Create a new domain
    snet_domain_t *snetd = SNetSetup__ts02();

    // Run
    ret = SNet__ts02___run(snetd, test_sz);
    
    // Cleanup
    SNetDomainDestroy(snetd);
    SNetGlobalDestroy();

    return ret;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

