/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

              * * * * ! SVP S-Net Graph Walker Runtime ! * * * *

                  Computer Systems Architecture (CSA) Group
                            Informatics Institute
                        University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : snet.utc

    File Type      : Code File

    ---------------------------------------

    File 
    Description    : This file contains functions that implement the primary 
                     services of the runtime.

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/

#include "snet.int.utc.h"
#include "memmng.int.utc.h"
#include "plcmng.int.utc.h"
#include "handle.int.utc.h"
#include "record.int.utc.h"

/*---*/

#include <stdio.h>
#include <stdarg.h>

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * Because the BLI "public" functions are declared within the "snet.utc.h" and
 * so far there is no need for an "internal" version of it and the 2
 * functions below are the only ones that are "internal" used only within
 * this file we declare them here.
 */
extern void SNetBLISubSystemInit();
extern void SNetBLISubSystemDestroy();

/**
 * Same as the above 2 functions but for
 * the error reporting sub-system. However there for
 * error reporting there are "internal" functions but still
 * there is no need for a "internal" header because those
 * are declared in "common.int.utc.h" since we want them
 * to be available almost everywhere.
 */
extern void SNetErrorSubSystemInit();
extern void SNetErrorSubSystemDestroy();

/*----------------------------------------------------------------------------*/
/**
 * Declaration of the function that invokes
 * the Graph Walker (used by "SNetOut()"). This is/should be
 * provided by another library (e.g. the "gw" and the "sane"
 * libraries both provide an implementation of this thread
 * function). It is the only "upward" dependency the "core"
 * library has!
 */
extern thread void 
SNetGWFork(snet_handle_t *hnd, snet_record_t *rec);

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * Initialization and cleanup of the "core" of the runtime (these
 * is supposed to be called by parts of the runtime that work on
 * top of the core (e.g. the "gw" library).
 */

void SNetGlobalInitializeCore()
{
    SNetErrorSubSystemInit();
    SNetMemMngSubSystemInit();
    SNetPlaceMngSubSystemInit();
    SNetBLISubSystemInit();

    /**
     * Call this again to finalize initializtion
     * of the "error sub-system" (the part of it
     * related to managing errors from multiple sources).
     */
    SNetErrorSubSystemInit();
}

/*----------------------------------------------------------------------------*/

void SNetGlobalDestroyCore()
{
    SNetGlobalDestroyCoreEx(true);
}

void SNetGlobalDestroyCoreEx(bool force)
{
    if (!force) {
        /**
         * !!TODO!!: Check if all sub-systems
         * are at a state that they can be destroyed
         * and if they are not wait!!
         */
    }

    SNetErrorSubSystemDestroy();
 
    SNetBLISubSystemDestroy();
    SNetPlaceMngSubSystemDestroy();
    SNetMemMngSubSystemDestroy();
    SNetErrorSubSystemDestroy();
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * SNetOutxxx() functions that are called from boxes to emmit
 * output records.
 */

static thread void
set_handle_out_record(snet_handle_t *hnd, shared snet_record_t *rec)
{
    snet_record_t *hnd_out_rec = SNetHndGetOutRecord(hnd);

    SNetHndSetOutRecord(hnd, rec);

    rec = hnd_out_rec;
}

/*----------------------------------------------------------------------------*/

void SNetOut(snet_handle_t *hnd, snet_record_t *rec)
{
    assert(hnd != NULL);
    assert(rec != NULL);

    hnd = (snet_handle_t *) SNetUnmaskPointer(hnd);

    family         fid;
    snet_record_t *rec_local = rec;

    place hnd_mutex = 
        SNetPlaceToUTCPlace(
            SNetBaseTypeGetMutexPlace(SNetHndToBase(hnd)));

    create (fid; hnd_mutex; 0; 0; 1; 1;;)
        set_handle_out_record(hnd, rec_local);

    sync(fid);

    if (rec_local == NULL) {
        return;
    }

    // The GW must be invoked at the place the
    // domain "lives". We can get this from the handle.
    place snetdplc =
        SNetPlaceToUTCPlace(
            SNetHndGetNetDomainHostPlace(hnd));

    // Ok now we can invoke the GW!!
    create (fid; snetdplc; 0; 0; 1; 1;;) SNetGWFork(hnd, rec_local);
    sync (fid);
}

/*----------------------------------------------------------------------------*/

void SNetOutRaw(
    snet_handle_t *hnd, 
    snet_bli_id_t  blid, int variant_idx, ...)
{
    va_list  vargs;
    va_start(vargs, variant_idx);

    SNetOutRawV(hnd, blid, variant_idx, vargs);

    va_end(vargs);
}

void SNetOutRawV(
    snet_handle_t *hnd, 
    snet_bli_id_t blid, int variant_idx, va_list vargs)
{
    assert(hnd != NULL);
    assert(variant_idx > 0);
    
    // Create a new record structure
    // with the data given as arguments.

    // First we need a variant encoding for the record.
    //
    // !!NOTE!! The variant index given to us from user
    // code takes values 1..N (according to the specification
    // and what has been implemented in the other runtime).
    //
    // Since all of our internal structures assume a starting
    // index of 0 we have to decrement the given by the user
    // code index (this why the "assert()" statement above exists
    // as well).
    snet_variantencoding_t *venc = 
        SNetHndCreateVEncForOutRecord(
            (snet_handle_t *) SNetUnmaskPointer(hnd), variant_idx - 1);

    if (venc == NULL) {
        // For this to happen possible causes are:
        //
        // 1. This function was not called from with in 
        // "box" code or generally not properly.
        // 
        // 2. Something is seriously wrong within the runtime.
        // For this to happen it means that either the cons-node
        // associated with the handle is not on a "box" node
        // which probably means a bug in the GW algorithms
        // or that the "box" node is not initialized properly
        // meaning a bug in the graph related code or in the
        // code within "entities.utc".
        SNetReportError(
            SNET_ERR_UNEXPECTED,
            "invalid call to SNetOutRaw()");

        SNetOnError();
    }

    SNetOut(hnd, SNetDataRecVCreate(blid, venc, vargs));
}

/*----------------------------------------------------------------------------*/

void SNetOutRawArray(
    snet_handle_t *hnd, 
    snet_bli_id_t  blid,
    int variant_idx, void **fields, int *tags, int *btags)
{
    assert(hnd != NULL);
    assert(variant_idx > 0);
    
    // Create a new record structure
    // with the data given as arguments.

    // First we need a variant encoding for the record.
    // See comment in the function "SNetOutRawV()" above!!
    snet_variantencoding_t *venc = 
        SNetHndCreateVEncForOutRecord(
            (snet_handle_t *) SNetUnmaskPointer(hnd), variant_idx - 1);

    if (venc == NULL) {
        // See related comment in the 
        // function SNetOutRaw().
        SNetReportError(
            SNET_ERR_UNEXPECTED,
            "invalid call to SNetOutRawArray()");

        SNetOnError();
    }

    SNetOut(hnd, SNetDataRecCreateFromArrays(blid, venc, fields, tags, btags));
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

