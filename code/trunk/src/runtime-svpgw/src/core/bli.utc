/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

              * * * * ! SVP S-Net Graph Walker Runtime ! * * * *

                  Computer Systems Architecture (CSA) Group
                            Informatics Institute
                        University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : bli.utc

    File Type      : Code File

    ---------------------------------------

    File 
    Description    : This file contains functions that implement the box
                     language interface related functions from the primary 
                     services of the runtime.

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/

#include "snet.int.utc.h"
#include "list.int.utc.h"
// #include "record.int.utc.h"

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

typedef struct {
    snet_bli_id_t        id;

    snet_bli_freefptr_t  freefun;
    snet_bli_copyfptr_t  copyfun;
    snet_bli_serfptr_t   serfun;
    snet_bli_deserfptr_t deserfun;

} snet_bli_t;

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Module's static data */

/**
 * List of registered interfaces
 */
static snet_list_t *BLI_REGISTRY = NULL;

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Module's static functions */

static unsigned int find_bli_with_id(snet_bli_id_t id)
{
    for (unsigned int it = SNetListBegin(BLI_REGISTRY); 
         it != 0; it = SNetListItemGetNext(BLI_REGISTRY, it)) {

        snet_bli_t *bli = (snet_bli_t *) 
            SNetListItemGetValueByRef(BLI_REGISTRY, it);

        if (bli->id == id) {
            return it;
        }
    }

    return 0;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Sub-system initialization functions */

void SNetBLISubSystemInit()
{
    if (BLI_REGISTRY != NULL) {
        return;
    }

    BLI_REGISTRY = SNetListCreate(sizeof(snet_bli_t), 4);
}

/*----------------------------------------------------------------------------*/

void SNetBLISubSystemDestroy()
{
    if (BLI_REGISTRY == NULL) {
        return;
    }

    SNetListDestroy(BLI_REGISTRY);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Interface registration function */

bool SNetGlobalRegisterInterface(
    snet_bli_id_t id,
    snet_bli_freefptr_t  freefun,
    snet_bli_copyfptr_t  copyfun,
    snet_bli_serfptr_t   serfun,
    snet_bli_deserfptr_t deserfun)
{
    assert(BLI_REGISTRY != NULL);

    if (find_bli_with_id(id) > 0) {
        return false;
    }

    snet_bli_t new_bli = {
        id,
        freefun,
        copyfun,
        serfun,
        deserfun
    };

    return (SNetListPushBack(BLI_REGISTRY, &new_bli) > 0);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Functions to retrieve box language interface functions by interface id */

snet_bli_freefptr_t
SNetGetFreeFun(snet_bli_id_t id)
{
    assert(BLI_REGISTRY != NULL);

    unsigned int bli_regid = find_bli_with_id(id);

    if (bli_regid == 0) {
        return NULL;
    }

    snet_bli_t *bli = (snet_bli_t *)
        SNetListItemGetValueByRef(BLI_REGISTRY, bli_regid);

    return bli->freefun;
}

snet_bli_copyfptr_t
SNetGetCopyFun(snet_bli_id_t id)
{
    assert(BLI_REGISTRY != NULL);

    unsigned int bli_regid = find_bli_with_id(id);

    if (bli_regid == 0) {
        return NULL;
    }

    snet_bli_t *bli = (snet_bli_t *)
        SNetListItemGetValueByRef(BLI_REGISTRY, bli_regid);

    return bli->copyfun;
}

snet_bli_serfptr_t
SNetGetSerializationFun(snet_bli_id_t id)
{
    assert(BLI_REGISTRY != NULL);

    unsigned int bli_regid = find_bli_with_id(id);

    if (bli_regid == 0) {
        return NULL;
    }

    snet_bli_t *bli = (snet_bli_t *)
        SNetListItemGetValueByRef(BLI_REGISTRY, bli_regid);

    return bli->serfun;
}

snet_bli_deserfptr_t
SNetGetDeserializationFun(snet_bli_id_t id)
{
    assert(BLI_REGISTRY != NULL);

    unsigned int bli_regid = find_bli_with_id(id);

    if (bli_regid == 0) {
        return NULL;
    }

    snet_bli_t *bli = (snet_bli_t *)
        SNetListItemGetValueByRef(BLI_REGISTRY, bli_regid);

    return bli->deserfun;
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

