/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

              * * * * ! SVP S-Net Graph Walker Runtime ! * * * *

                  Computer Systems Architecture (CSA) Group
                            Informatics Institute
                        University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : idxvec.utc

    File Type      : Code File

    ---------------------------------------

    File 
    Description    :

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/

#include "idxvec.int.utc.h"
#include "core/memmng.int.utc.h"

/*---*/

#include <string.h>
#include <stdlib.h>

/*----------------------------------------------------------------------------*/
/**
 * Datatypes for an index
 */
typedef struct {
    volatile 
    unsigned int len;

    volatile
    unsigned int buf_sz;

    /*---*/

    snet_idxvec_item_t *items;

} snet_idxvec_data_t;

/*---*/

struct index_vector {
    snet_idxvec_data_t *data;

}; // index_vector;

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Module's static functions */

static snet_idxvec_data_t* alloc_data_struct(int init_len)
{
    void *buf = SNetMemAlloc(
        sizeof(snet_idxvec_data_t) +
        sizeof(snet_idxvec_item_t) * init_len +
        sizeof(snet_idxvec_item_t) * SVPSNETGWRT_IDXVEC_INCR_STEP);

    snet_idxvec_data_t *idxvd = (snet_idxvec_data_t *) buf;

    idxvd->len     = 0;
    idxvd->buf_sz  = init_len + SVPSNETGWRT_IDXVEC_INCR_STEP;
    idxvd->items   = (snet_idxvec_item_t *) (idxvd + 1);

    SNetMemIncreaseRefCount(idxvd);

    return idxvd;
}

/*----------------------------------------------------------------------------*/

static void realloc_data_struct(
    snet_idxvec_t *idxv, 
    unsigned int new_len,
    unsigned int copy_start, unsigned int copy_count)
{
    bool alloc_new = false;

    if (idxv->data == NULL) {
        alloc_new = true;

    } else {
        if (SNetMemIncreaseRefCount(idxv->data) > 1) {
            alloc_new = true;
        }
        
        SNetMemDecreaseRefCount(idxv->data);
    }

    if (alloc_new) {
        snet_idxvec_data_t *old_data = idxv->data;

        idxv->data = alloc_data_struct(new_len);

        if (old_data != NULL) {
            if(copy_count > 0) {
                SNetMemCopy(
                    old_data->items + copy_start,
                    idxv->data->items, copy_count * sizeof(snet_idxvec_item_t));
            }

            if (SNetMemDecreaseRefCount(old_data) == 1) {
                SNetMemFree(old_data);
            }
        }

        idxv->data->len = copy_count;

        return;
    }

    if (copy_count > 0 && copy_start > 0) {
        SNetMemCopy(
            idxv->data->items + copy_start,
            idxv->data->items, copy_count * sizeof(snet_idxvec_item_t));
    }

    idxv->data->len = copy_count;

    if (idxv->data->buf_sz < new_len || 
        idxv->data->buf_sz > new_len + (
            2 * SVPSNETGWRT_IDXVEC_INCR_STEP)) {

        void *buf = SNetMemRealloc(
            idxv->data,
            sizeof(snet_idxvec_data_t) +
            sizeof(snet_idxvec_item_t) * new_len +
            sizeof(snet_idxvec_item_t) * SVPSNETGWRT_IDXVEC_INCR_STEP);

        idxv->data         = (snet_idxvec_data_t *)(buf);
        idxv->data->items  = (snet_idxvec_item_t *)(idxv->data + 1);
        idxv->data->buf_sz = new_len + SVPSNETGWRT_IDXVEC_INCR_STEP;
    }
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static unsigned int str_idxvec_len(const char *str)
{
    if (str == NULL) {
        return 0;
    }

    const char *c = str;
    unsigned int len = 0;

    while (*c != 0) {
        if (*c == '.') {
            len++;
        }

        ++c;
    }

    return (c == str ? 0 : len + 1);
}

/*----------------------------------------------------------------------------*/

static void set_from_str(
    snet_idxvec_item_t *idxv_item, const char *str, unsigned int str_len)
{
    char *buf = (char *) SNetMemAlloc(sizeof(char) * (str_len + 1));

    while (*str != 0) {
        char *buf_item = buf;

        while (*str != '.' && *str != 0) {
            *buf_item = *str;

            ++str;
            ++buf_item;
        }

        *buf_item  = 0;
        *idxv_item = (snet_idxvec_item_t) strtol(buf, NULL, 10);

        if (*str != 0) {
            ++str;
        }

        ++idxv_item;
    }

    SNetMemFree(buf);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static snet_idxvec_cmp_result_t
compare(const snet_idxvec_t *idxv1, const snet_idxvec_t *idxv2, bool ext)
{
    assert(idxv1 != NULL);
    assert(idxv2 != NULL);

    if (idxv1 == idxv2)
        return IDXVEC_CMP_RES_EQUAL;

    if (idxv1->data == idxv2->data)
        return IDXVEC_CMP_RES_EQUAL;

    // Check if either one is infinite
    if (idxv2->data == NULL)
        return IDXVEC_CMP_RES_LESS;

    if (idxv1->data == NULL)
        return IDXVEC_CMP_RES_GREATER;

    // Check items one by one
    unsigned int min_len = (
        idxv1->data->len < idxv2->data->len ? 
        idxv1->data->len : idxv2->data->len);

    for (unsigned int i=0; i < min_len; i++) {
        snet_idxvec_item_t idxv1_it = SNetIdxVecGetItemValue(idxv1, i);
        snet_idxvec_item_t idxv2_it = SNetIdxVecGetItemValue(idxv2, i);

        if (idxv1_it > 0 && idxv2_it > 0) {
            if (idxv1_it < idxv2_it)
                return IDXVEC_CMP_RES_LESS;
            else if (idxv1_it > idxv2_it)
                return IDXVEC_CMP_RES_GREATER;
        }

        if (ext && (idxv1_it == 0 || idxv2_it == 0)) {
            continue;
        }

        if (idxv1_it != idxv2_it)
            return IDXVEC_CMP_RES_UNDEFINED;
    }

    if (idxv1->data->len == idxv2->data->len) {
        return IDXVEC_CMP_RES_EQUAL;
    }

    // Check again for infinite (that an index vector represents 
    // infinite is indicated with either data == NULL
    // checked above or data->len == 0 which we check now.
    if (idxv2->data->len == 0)
        return IDXVEC_CMP_RES_LESS;

    if (idxv1->data->len == 0)
        return IDXVEC_CMP_RES_GREATER;
   
    // Finnaly compare the lengths
    return (idxv1->data->len < idxv2->data->len ?
        IDXVEC_CMP_RES_LESS : IDXVEC_CMP_RES_GREATER);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static snet_idxvec_t*
calc_infimum(const snet_idxvec_t *idxv1, const snet_idxvec_t *idxv2, bool ext)
{
    assert(idxv1 != NULL);
    assert(idxv2 != NULL);

    if (SNetIdxVecIsInfinite(idxv1))
        return SNetIdxVecCreateCopy(idxv2);

    if (SNetIdxVecIsInfinite(idxv2))
        return SNetIdxVecCreateCopy(idxv1);

    snet_idxvec_t *infimum = SNetIdxVecCreate();

    unsigned int min_len = (
        idxv1->data->len < idxv2->data->len ? 
        idxv1->data->len : idxv2->data->len);

    for (unsigned int i=0; i < min_len; i++) {
        snet_idxvec_item_t idxv1_it = SNetIdxVecGetItemValue(idxv1, i);
        snet_idxvec_item_t idxv2_it = SNetIdxVecGetItemValue(idxv2, i);

        if (idxv1_it > 0 && idxv2_it > 0) {
            snet_idxvec_item_t *min = (
                idxv1_it < idxv2_it ? &idxv1_it : &idxv2_it);

            SNetIdxVecPushArray(infimum, min, 1);

        } else {
            if (idxv1_it == idxv2_it) {
                SNetIdxVecPushArray(infimum, &idxv1_it, 1);
                continue;
            }

            if (!ext || idxv1_it > 0 || idxv2_it > 0) {
                break;
            }
            
            if (infimum->data->len > 0)
                SNetIdxVecPushStr(infimum, "0");
            else
                SNetIdxVecPushStr(infimum, "1.0");
        }
    }

    if (infimum->data->len == 0)
        SNetIdxVecPushStr(infimum, "1");

    return infimum;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Initialization, Creation and Destruction */

void SNetIdxVecInit(snet_idxvec_t *idxv)
{
    assert(idxv != NULL);
    idxv->data = NULL;
}

void SNetIdxVecInitCopy(snet_idxvec_t *idxv, const snet_idxvec_t *srcv)
{
    assert(idxv != srcv);

    assert(idxv != NULL);
    assert(srcv != NULL);

    if (idxv == srcv) {
        return;
    }

    if (srcv->data == NULL) {
        idxv->data = NULL;
        return;
    }

    idxv->data = srcv->data;
    SNetMemIncreaseRefCount(srcv->data);
}

void SNetIdxVecInitFromStr(snet_idxvec_t *idxv, const char *str)
{
    assert(idxv != NULL);

    if (str == NULL) {
        idxv->data = NULL;
        return;
    }

    unsigned int str_len = (unsigned int) str_idxvec_len(str);

    idxv->data      = alloc_data_struct(str_len);
    idxv->data->len = str_len;

    set_from_str(idxv->data->items, str, strlen(str));
}

void SNetIdxVecInitFromArray(
    snet_idxvec_t *idxv, const snet_idxvec_item_t *arr, unsigned int arr_sz)
{
    assert(idxv != NULL);
    assert(arr != NULL);

    idxv->data = alloc_data_struct(arr_sz); 

    SNetMemCopy(
        arr,
        idxv->data->items,
        arr_sz * sizeof(snet_idxvec_item_t));

    idxv->data->len = arr_sz;
}

/*----------------------------------------------------------------------------*/

snet_idxvec_t* 
SNetIdxVecCreate()
{
    snet_idxvec_t *idxv =
        (snet_idxvec_t *)
            SNetMemAlloc(sizeof(snet_idxvec_t));

    SNetIdxVecInit(idxv);

    return idxv;
}

snet_idxvec_t*
SNetIdxVecCreateCopy(const snet_idxvec_t *src)
{
    assert(src != NULL);

    snet_idxvec_t *idxv = 
        (snet_idxvec_t *)
            SNetMemAlloc(sizeof(snet_idxvec_t));

    SNetIdxVecInitCopy(idxv, src);

    return idxv;
}

snet_idxvec_t*
SNetIdxVecCreateFromStr(const char *str)
{
    snet_idxvec_t *idxv =
        (snet_idxvec_t *) 
            SNetMemAlloc(sizeof(snet_idxvec_t));

    SNetIdxVecInitFromStr(idxv, str);

    return idxv;
}

snet_idxvec_t* 
SNetIdxVecCreateFromArray(const snet_idxvec_item_t *arr, unsigned int arr_sz)
{
    assert(arr != NULL);

    snet_idxvec_t *idxv =
        (snet_idxvec_t *)
            SNetMemAlloc(sizeof(snet_idxvec_t));

    SNetIdxVecInitFromArray(idxv, arr, arr_sz);

    return idxv;
}

/*----------------------------------------------------------------------------*/

void SNetIdxVecDestroy(snet_idxvec_t *idxv)
{
    assert(idxv != NULL);

    if (idxv->data != NULL) {
        if (SNetMemDecreaseRefCount(idxv->data) == 1) {
            SNetMemFree(idxv->data);
        }
    }

    SNetMemFree(idxv);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Value changing */

void SNetIdxVecSetToInfinite(snet_idxvec_t *idxv)
{
    assert(idxv != NULL);

    if (idxv->data == NULL) {
        return;
    }

    if (SNetMemDecreaseRefCount(idxv->data) == 1) {
        SNetMemIncreaseRefCount(idxv->data);

        realloc_data_struct(idxv, 0, 0, 0);

        idxv->data->len = 0;
        return;
    }

    idxv->data = NULL;
}

/*----------------------------------------------------------------------------*/

void SNetIdxVecSetValue(snet_idxvec_t *idxv1, const snet_idxvec_t *idxv2)
{
    assert(idxv1 != NULL);
    assert(idxv2 != NULL);

    if (idxv1 == idxv2) {
        return;
    }

    if (idxv1->data == idxv2->data) {
        return;
    }

    if (idxv2->data == NULL) {
        if (idxv1->data != NULL)
            realloc_data_struct(idxv1, 0, 0, 0);

    } else {
        realloc_data_struct(idxv1, idxv2->data->len, 0, 0);

        SNetMemCopy(
            idxv2->data->items,
            idxv1->data->items,
            idxv2->data->len * sizeof(snet_idxvec_item_t));

        idxv1->data->len = idxv2->data->len;
    } 
}

void SNetIdxVecSetValueFromStr(snet_idxvec_t *idxv, const char *str)
{
    assert(idxv != NULL);

    if (str == NULL) {
        if (idxv->data != NULL)
            realloc_data_struct(idxv, 0, 0, 0);

        return;
    }

    unsigned int str_len = str_idxvec_len(str);

    realloc_data_struct(idxv, str_len, 0, 0);
    set_from_str(idxv->data->items, str, strlen(str));

    idxv->data->len = str_len;
}

void SNetIdxVecSetValueFromArray(
    snet_idxvec_t *idxv,
    const snet_idxvec_item_t *arr, unsigned int arr_sz)
{
    assert(idxv != NULL);
    assert(arr != NULL);

    realloc_data_struct(idxv, arr_sz, 0, 0);

    SNetMemCopy(
        arr,
        idxv->data->items,
        arr_sz * sizeof(snet_idxvec_item_t));

    idxv->data->len = arr_sz;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Item manipulation */

snet_idxvec_item_t 
SNetIdxVecGetItemValue(const snet_idxvec_t *idxv, unsigned int pos)
{
    assert(idxv != NULL);
    assert(idxv->data != NULL);
    assert(idxv->data->len > pos);

    return idxv->data->items[pos];
}

/*----------------------------------------------------------------------------*/

void SNetIdxVecSetItemValue(
    snet_idxvec_t *idxv,
    unsigned int pos, snet_idxvec_item_t val)
{
    assert(idxv != NULL);
    assert(idxv->data != NULL);
    assert(idxv->data->len > pos);

    realloc_data_struct(idxv, idxv->data->len, 0, idxv->data->len);

    idxv->data->items[pos] = val;
}

void SNetIdxVecIncrItemValue(
    snet_idxvec_t *idxv,
    unsigned int pos, snet_idxvec_item_t val)
{
    assert(idxv != NULL);
    assert(idxv->data != NULL);
    assert(idxv->data->len > pos);

    realloc_data_struct(idxv, idxv->data->len, 0, idxv->data->len);

    idxv->data->items[pos] += val;
}

void SNetIdxVecDecrItemValue(
    snet_idxvec_t *idxv,
    unsigned int pos, snet_idxvec_item_t val)
{
    assert(idxv != NULL);
    assert(idxv->data != NULL);
    assert(idxv->data->len > pos);

    realloc_data_struct(idxv, idxv->data->len, 0, idxv->data->len);

    idxv->data->items[pos] -= val;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Properties retrieval */

bool SNetIdxVecIsInfinite(const snet_idxvec_t *idxv)
{
    assert(idxv != NULL);

    if (idxv->data == NULL) {
        return true;
    }

    if (idxv->data->len == 0) {
        return true;
    }

    return false;
}

/*----------------------------------------------------------------------------*/

unsigned int SNetIdxVecGetLen(const snet_idxvec_t *idxv)
{
    assert(idxv != NULL);
    
    if (idxv->data == NULL) {
        return 0;
    }

    return idxv->data->len;
}

unsigned int SNetIdxVecGetBufSize(const snet_idxvec_t *idxv)
{
    assert(idxv != NULL);

    if (idxv->data == NULL) {
        return 0;
    }

    return idxv->data->buf_sz;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Comparison */

snet_idxvec_cmp_result_t
SNetIdxVecCompare(const snet_idxvec_t *idxv1, const snet_idxvec_t *idxv2)
{
    return compare(idxv1, idxv2, false);
}

snet_idxvec_cmp_result_t
SNetIdxVecCompareEx(const snet_idxvec_t *idxv1, const snet_idxvec_t *idxv2)
{
    return compare(idxv1, idxv2, true);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Infimum calculation */

snet_idxvec_t*
SNetIdxVecCalcInfimum(const snet_idxvec_t *idxv1, const snet_idxvec_t *idxv2)
{
    return calc_infimum(idxv1, idxv2, false);
}

snet_idxvec_t*
SNetIdxVecCalcInfimumEx(const snet_idxvec_t *idxv1, const snet_idxvec_t *idxv2)
{
    return calc_infimum(idxv1, idxv2, true);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Pushing & Popping */

void SNetIdxVecPush(
    snet_idxvec_t *idxv1, 
    const snet_idxvec_t *idxv2, unsigned int start_item_idx)
{
    assert(idxv1 != NULL);
    assert(idxv2 != NULL);
    assert(start_item_idx < SNetIdxVecGetLen(idxv2));

    unsigned int len1 = SNetIdxVecGetLen(idxv1);
    unsigned int len2 = SNetIdxVecGetLen(idxv2);

    if (len2 == 0) {
        return;
    }

    len2 -= start_item_idx;

    realloc_data_struct(idxv1, len1 + len2, 0, len1);

    SNetMemCopy(
        idxv2->data->items + start_item_idx,
        idxv1->data->items + len1, len2 * sizeof(snet_idxvec_item_t));

    idxv1->data->len = len1 + len2;
}

void SNetIdxVecPushStr(snet_idxvec_t *idxv, const char *str)
{
    assert(idxv != NULL);

    if (str == NULL) {
        return;
    }

    unsigned int len1 = SNetIdxVecGetLen(idxv);
    unsigned int len2 = str_idxvec_len(str);

    realloc_data_struct(idxv, len1 + len2, 0, len1);
    set_from_str(idxv->data->items + len1, str, strlen(str));

    idxv->data->len = len1 + len2;
}

void SNetIdxVecPushArray(
    snet_idxvec_t *idxv,
    const snet_idxvec_item_t *arr, unsigned int arr_sz)
{
    assert(idxv != NULL);
    assert(arr != NULL);

    unsigned int len = SNetIdxVecGetLen(idxv);

    if (arr_sz == 0) {
        return;
    }

    realloc_data_struct(idxv, len + arr_sz, 0, len);

    SNetMemCopy(
        arr,
        idxv->data->items + len,
        arr_sz * sizeof(snet_idxvec_item_t));

    idxv->data->len = len + arr_sz;
}

/*----------------------------------------------------------------------------*/

void SNetIdxVecPopLeft(snet_idxvec_t *idxv, unsigned int count)
{
    assert(idxv != NULL);
    assert(idxv->data != NULL);
    assert(idxv->data->len >= count);

    if (count == 0) {
        return;
    }

    unsigned int new_len = idxv->data->len - count;

    realloc_data_struct(idxv, new_len, count, new_len);

    idxv->data->len = new_len;
}

void SNetIdxVecPopRight(snet_idxvec_t *idxv, unsigned int count)
{
    assert(idxv != NULL);
    assert(idxv->data != NULL);
    assert(idxv->data->len >= count);

    if (count == 0) {
        return;
    }

    unsigned int new_len = idxv->data->len - count;

    realloc_data_struct(idxv, new_len, 0, new_len);
    
    idxv->data->len = new_len;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/* Convertion */

snet_idxvec_item_t* 
SNetIdxVecToArray(const snet_idxvec_t *idxv, snet_idxvec_item_t *arr)
{
    assert(idxv != NULL);
    assert(arr != NULL);

    if (idxv->data == NULL) {
        return NULL;
    }

    if (idxv->data->len == 0) {
        return NULL;
    }

    SNetMemCopy(
        idxv->data->items,
        arr,
        idxv->data->len * sizeof(snet_idxvec_item_t));

    return arr;
}

/*----------------------------------------------------------------------------*/

const char* 
SNetIdxVecToString(const snet_idxvec_t *idxv, char *str)
{
    assert(idxv != NULL);

    if (idxv->data == NULL) {
        return NULL;
    }

    if (idxv->data->len == 0) {
        return NULL;
    }

    char *c = str;
    char *new_str = NULL;
    unsigned int new_str_sz = 0;

    if (str == NULL) {
        new_str_sz = SVPSNETGWRT_IDXVEC_ITEM_MAX_DEC_DIGITS;
        new_str    = (char *) SNetMemAlloc(new_str_sz * sizeof(char));

        c = new_str;
    }

    unsigned int str_len = 0;
    unsigned int item_len = 0;

    for (unsigned int i=0; i < idxv->data->len; i++) {
        if (i == idxv->data->len - 1) {
            item_len = snprintf(
                c,
                SVPSNETGWRT_IDXVEC_ITEM_MAX_DEC_DIGITS,
                "%" PRISNETIDXVECITEM, idxv->data->items[i]);

        } else {
            item_len = snprintf(
                c, 
                SVPSNETGWRT_IDXVEC_ITEM_MAX_DEC_DIGITS,
                "%" PRISNETIDXVECITEM ".", idxv->data->items[i]);
        }

        if (item_len < 0) {
            SNetReportError(
                SNET_ERR_UNEXPECTED,
                "failed to convert index vector to string");

            SNetOnError();
        }
            
        if (item_len >= SVPSNETGWRT_IDXVEC_ITEM_MAX_DEC_DIGITS) {
            SNetReportError(
                SNET_ERR_UNEXPECTED,
                "failed to convert index vector to string "
                "due to item exceeding max size in decimal digits");

            SNetOnError();
        }

        str_len += item_len;

        if (str == NULL) {
            if (new_str_sz - str_len <
                SVPSNETGWRT_IDXVEC_ITEM_MAX_DEC_DIGITS) {

                new_str_sz += SVPSNETGWRT_IDXVEC_ITEM_MAX_DEC_DIGITS;

                new_str = (char *) 
                    SNetMemRealloc(new_str, new_str_sz * sizeof(char));

                c = new_str + str_len;
                continue;
            }
        }

        c += item_len;
    }

    (*c) = 0;

    if (str == NULL) {
        new_str = (char *)
            SNetMemRealloc(new_str, str_len + 1 * sizeof(char));
    }

    return (str != NULL ? str : new_str);
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

