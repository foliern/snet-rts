/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

              * * * * ! SVP S-Net Graph Walker Runtime ! * * * *

                  Computer Systems Architecture (CSA) Group
                            Informatics Institute
                        University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : resmng.utc

    File Type      : Code File

    ---------------------------------------

    File 
    Description    :

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/

#include "resmng.int.utc.h"

/*---*/

#include "core/plcmng.int.utc.h"
#include "core/memmng.int.utc.h"

/*---*/

#ifdef SVPSNETGWRT_SVP_PLATFORM_DUTCPTL
#include "sep.utc.h"
#endif

/*---*/

#include <string.h>

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void
SNetResMngSubSystemInit()
{
#ifdef SVPSNETGWRT_SVP_PLATFORM_DUTCPTL
    //family fid;

    //create (fid; SEP_PLACE; 0; 0; 1; 1;;) SEP_init();
    //sync (fid);
#endif
}

void
SNetResMngSubSystemDestroy()
{
#ifdef SVPSNETGWRT_SVP_PLATFORM_DUTCPTL
    //family fid;

    //create (fid; SEP_PLACE; 0; 0; 1; 1;;) SEP_end();
    //sync (fid);
#endif
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void
SNetResourceRelease(snet_place_t plc)
{
    if (SNetPlaceIsNull(plc)) {
        return;
    }

#ifdef SVPSNETGWRT_SVP_PLATFORM_UTCPTL
#ifdef SVPSNETGWRT_SVP_PLATFORM_DUTCPTL
    family fid;
    place  utcplc = SNetPlaceToUTCPlace(plc);

    SNetPlaceFree(plc);

    create (fid; SEP_PLACE; 0; 0; 1; 1;;) SEP_release_place(utcplc);
    sync (fid);

#else  // normal/non-distributed UTCPTL
#ifdef SVPSNETGWRT_RESMNG_ALLOC_PLACE_ON_NORMAL_UTCPTL
    SNetPlaceFree(plc);

#endif
#endif // SVPSNETGWRT_SVP_PLATFORM_DUTCPTL
#endif // SVPSNETGWRT_SVP_PLATFORM_UTCPTL
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

snet_place_t
SNetResourceRequestBox(snet_box_name_t bn, snet_metadata_t *bmeta)
{
    if (bmeta != NULL && SNetMetaDataBoxGetExecLocalAlwaysFlag(bmeta)) {
        return SNetPlaceGetNull();
    }

#ifdef SVPSNETGWRT_SVP_PLATFORM_UTCPTL
#ifdef SVPSNETGWRT_SVP_PLATFORM_DUTCPTL
    family fid;
    place  plc;

    const char *bnstr = 
        SNetMetaDataBoxNameToString(bn);

    const char *meta_srvidstr = (
        bmeta == NULL ?
        NULL :
        SNetMetaDataBoxServiceIdToString(
            SNetMetaDataBoxGetServiceId(bmeta)));

    const char *srvid = (meta_srvidstr == NULL ? bnstr : meta_srvidstr);

    assert(srvid != NULL);

    // There is no need to give free and copy
    // functions for the specs' data because 
    // the data consists of a string => continuous
    // data block for which the copying method 
    // provided by default by the place management
    // system can handle it.
    snet_place_specs_t specs = {
        false,
        false,
        PLACE_TYPE_FUNC_SPEC,
        0,
        (void *)(srvid), strlen(srvid) + 1,  NULL, NULL
    };

    sep_req_t sep_plcreq = { (char *)(srvid), 1 };

    bool wait_for_resource = (
        bmeta == NULL ?
        true : (!SNetMetaDataBoxGetExecLocalIfNoResourceFlag(bmeta)));

    create (fid; SEP_PLACE; 0; 0; 1; 1;;)
        SEP_request_place(sep_plcreq,  plc, wait_for_resource);

    sync (fid);
    return (SNetPlaceTrackUTCPlace(plc, &specs));

#else  // normal/non-distributed UTCPTL
#ifdef SVPSNETGWRT_RESMNG_ALLOC_PLACE_ON_NORMAL_UTCPTL
    snet_place_specs_t specs = {
        false,
        false,
        PLACE_TYPE_FUNC_SPEC,
        0,
        NULL, 0 NULL, NULL
    };

    if (SNetMetaDataBoxGetExecLocalIfNoResourceFlag(bmeta))
        return SNetPlaceTryAlloc(&specs);
    else
        return SNetPlaceAlloc(&specs);

#else  // never allocate a place when using the "normal" UTCPTL
    return SNetPlaceGetNull();

#endif
#endif // SVPSNETGWRT_SVP_PLATFORM_DUTCPTL

#else  // non-UTCPTL platform
    return SNetPlaceGetNull();

#endif // SVPSNETGWRT_SVP_PLATFORM_UTCPTL
}

/*----------------------------------------------------------------------------*/

snet_place_t
SNetResourceRequestDomain(snet_metadata_t *nmeta)
{
    /**
     * Not implemented yet.
     */
    return SNetPlaceGetNull();
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

