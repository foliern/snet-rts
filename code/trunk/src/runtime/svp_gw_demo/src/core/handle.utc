/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

           * * * * ! SVP S-Net Graph Walker Runtime (demo) ! * * * *

                   Computer Systems Architecture (CSA) Group
                             Informatics Institute
                         University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : handle.utc

    File Type      : Header File

    ---------------------------------------

    File 
    Description    :

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/

#include "handle.int.utc.h"

#include "memmng.int.utc.h"
#include "plcmng.int.utc.h"

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

struct handle {
    snet_base_t base;
    
    /*---*/

    snet_record_t       *out_rec;
    snet_conslst_node_t *cons_node;

}; // struct handle

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void SNetHandleInit(
    snet_handle_t *hnd, const snet_conslst_node_t *cons_node)
{
    assert(hnd != NULL);
    assert(cons_node != NULL);
    
    assert(SNetBaseTypeSameDomain(
        &hnd->base, SNetConsLstNodeToBase(cons_node)));

    place owner_plc = SNetGetMyPlace();

    SNetBaseTypeInit(&hnd->base,
        SNetBaseTypeGetDomain(SNetConsLstNodeToBase(cons_node)));

    SNetBaseTypeSetPlaces(&hnd->base, &owner_plc, NULL, NULL);

    hnd->out_rec   = NULL;
    hnd->cons_node = (snet_conslst_node_t *)(cons_node);
}

/*----------------------------------------------------------------------------*/

snet_handle_t* SNetHandleCreate(const snet_conslst_node_t *cons_node)
{
    snet_handle_t *hnd = 
        (snet_handle_t *) SNetMemAlloc(sizeof(snet_handle_t));

    if (hnd == NULL) {
        /**
         * !!TODO!!: Handle runtime error.
         */
        abort();
    }

    SNetHandleInit(hnd, cons_node);

    return hnd;
}

/*----------------------------------------------------------------------------*/

void SNetHandleDestroy(snet_handle_t *hnd)
{
    assert(hnd != NULL);
    SNetMemFree(hnd);
}

/*----------------------------------------------------------------------------*/

void SNetHandleSetupMutex(snet_handle_t *hnd, const place *p)
{
    assert(hnd != NULL);
    SNetBaseTypeSetPlaces(&hnd->base, NULL, p, NULL);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

snet_conslst_node_t* SNetHandleGetConsNode(const snet_handle_t *hnd)
{
    assert(hnd != NULL);
    return (snet_conslst_node_t *)(hnd->cons_node);
}

snet_record_t* SNetHandleGetOutRecord(const snet_handle_t *hnd)
{
    assert(hnd != NULL);
    return (snet_record_t *)(hnd->out_rec);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void SNetHandleSetOutRecord(snet_handle_t *hnd, const snet_record_t *rec)
{
    assert(hnd != NULL);

    assert(rec == NULL || 
        SNetBaseTypeSameDomain(&hnd->base, SNetRecToBase(rec)));

    hnd->out_rec = (snet_record_t *)(rec);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

const snet_base_t* SNetHandleToBase(const snet_handle_t *hnd)
{
    assert(hnd != NULL); return &hnd->base;
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

