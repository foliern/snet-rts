/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

           * * * * ! SVP S-Net Graph Walker Runtime (demo) ! * * * *

                   Computer Systems Architecture (CSA) Group
                             Informatics Institute
                         University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : snet.utc

    File Type      : Header File

    ---------------------------------------

    File 
    Description    : This file contains functions that implement the primary 
                     services of the runtime.

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/

#include "snet.utc.h"

/*---*/

#include "common.int.utc.h"
#include "memmng.int.utc.h"
#include "handle.int.utc.h"
#include "domain.int.utc.h"

#include "gw.int.utc.h"
#include "conslist.int.utc.h"

/*---*/

#include <stdarg.h>

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * Because the BLI "public" functions are declared within the "snet.utc.h" and
 * so far there is no need for an "internal" version of it and the 2
 * functions below are the only ones that are "internal" used only within
 * this file we declare them here (If this situation changes and a 
 * "snet.int.utc.h" is created in the future the 2 declarations below
 * can/should be moved there).
 */

extern void SNetBLISubSystemInit();
extern void SNetBLISubSystemDestroy();

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * Global initialization and termination and box lanugage interface related
 * routines for the runtime.
 */

void SNetGlobalInitialize()
{
    SNetBLISubSystemInit();
    SNetDomainSubSystemInit();
}

void SNetGlobalDestroy()
{
    SNetBLISubSystemDestroy();
    SNetDomainSubSystemDestroy();
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * Network execution management functions
 */

void SNetKill(snet_domain_t *snetd)
{
    /**
     * Not implemented yet
     */
}

void SNetSqueeze(snet_domain_t *snetd)
{
    /**
     * Not implemented yet
     */
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * SNetPushIn() function used to insert
 * records to the network.
 */

void SNetPushIn(snet_domain_t *snetd, snet_record_t *rec)
{
    assert(snetd != NULL);
    assert(rec != NULL);

    snetd = (snet_domain_t *) SNetUnmaskPointer(snetd);

    assert(SNetDomainIsSame(
        snetd, SNetBaseTypeGetDomain(SNetRecToBase(rec))));
     
    family fid;
    place  gw_plc = SNetDomainGetGWPlace(snetd); 

    create (fid; gw_plc; 0; 0; 1; 1;;) 
        SNetGW((snet_handle_t *)(NULL), rec);

    /**
     * !!!NOTE!!!: This should not be here but since the uTC-PTL 
     * does not support continuation creates yet it is required
     * because otherwise the application does not terminate.
     */
    sync(fid);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * SNetPopOut() function used to get output
 * records of a network.
 */

static thread void read_net_out_buffer(
    snet_buffer_t *buf, place *cond_plc, shared snet_record_t *out_rec)
{
    snet_record_t *r = (snet_record_t *) SNetBufPop(buf);

    if (cond_plc == NULL) {
        out_rec = r;
        return;
    }

    if (r == NULL) {
        /**
         * !!TODO!!: Suspend ?????????
         */
    }
}

/*----------------------------------------------------------------------------*/

snet_record_t* SNetPopOut(snet_domain_t *snetd, bool block)
{
    assert(snetd != NULL);

    snetd = (snet_domain_t *) SNetUnmaskPointer(snetd);
   
    snet_record_t *rec     = NULL;
    snet_buffer_t *out_buf = SNetDomainGetOutBuffer(snetd);

    place buf_mutex_plc =
        SNetBaseTypeGetMutexPlace(SNetBufToBase(out_buf));

    place buf_cond_plc  =
        SNetDomainGetOutBufferCondPlace(snetd);

    place *buf_cond_plc_ptr = (block ? &buf_cond_plc : NULL);

    family fid;

    create (fid; buf_mutex_plc; 0; 0; 1; 1;;)
        read_net_out_buffer(out_buf, buf_cond_plc_ptr, rec);

    sync(fid);
    return(rec);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * SNetOutxxx() functions that are called from boxes to emmit
 * output records.
 */

static thread void set_handle_out_record(
    snet_handle_t *hnd, snet_record_t *rec, shared bool has_out_rec)
{
    if (SNetHndGetOutRecord(hnd) == NULL) {
        SNetHndSetOutRecord(hnd, rec);

        has_out_rec = false;
        return;
    }

    has_out_rec = true;
}

/*----------------------------------------------------------------------------*/

void SNetOut(snet_handle_t *hnd, snet_record_t *rec)
{
    assert(hnd != NULL);
    assert(rec != NULL);

    hnd = (snet_handle_t *) SNetUnmaskPointer(hnd);

    assert(SNetBaseTypeSameDomain(
        SNetHndToBase(hnd), SNetRecToBase(rec)));

    family fid;
    bool   is_first_call = false;
    place  hnd_mutex     = SNetBaseTypeGetMutexPlace(SNetHndToBase(hnd));

    create (fid; hnd_mutex; 0; 0; 1; 1;;)
        set_handle_out_record(hnd, rec, is_first_call);

    sync(fid);

    if (!is_first_call) {
        place  gw_plc = SNetDomainGetGWPlace(
            SNetBaseTypeGetDomain(SNetHndToBase(hnd))); 

        create (fid; gw_plc; 0; 0; 1; 1;;) SNetGW(hnd, rec);
    }
}

/*----------------------------------------------------------------------------*/

void SNetOutRaw(snet_handle_t *hnd, int variant_num, ...)
{
    assert(hnd != NULL);
    
    if (variant_num == 0) {
        return;
    }

    va_list vargs;

    // Create a new record structure
    // and with the data given as arguments.
    snet_record_t *rec = SNetRecCreate(
        REC_DESCR_DATA,
        SNetBaseTypeGetDomain(SNetHndToBase(
            (snet_handle_t *)SNetUnmaskPointer(hnd))));

    va_start(vargs, variant_num);

    for (int i=0; i < variant_num; i++) {
        /**
         * !!TODO!!: Setup the record
         */
    }

    va_end(vargs);

    SNetOut(hnd, rec);
}

/*----------------------------------------------------------------------------*/

void SNetOutRawArray(
    snet_handle_t *hnd, 
    int if_id, int var_num, void **fields, int **tags, int **btags)
{
    assert(hnd != NULL);

    // Create a new record structure
    // and with the data given as arguments.
    snet_record_t *rec = SNetRecCreate(
        REC_DESCR_DATA,
        SNetBaseTypeGetDomain(SNetHndToBase(
            (snet_handle_t *)SNetUnmaskPointer(hnd))));

    /**
     * !!TODO!!: Setup the record
     */

    SNetOut(hnd, rec);
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

