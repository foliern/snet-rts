#include "snet-gwrt.utc.h"
#include "snet-gwrt.int.utc.h"

/*---*/

#include "snet-gwrt/graphstructs.int.utc.h"

/*---*/

#include <stdio.h>
#include <stdlib.h>

/*----------------------------------------------------------------------------*/

#define INDENT_CHR  ' '
#define INDENT_STEP 4

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static void print_indent(unsigned int cols);

static void print_domain_graph(
    const snet_domain_t *snetd, unsigned int indent);

static void print_graph(const snet_gnode_t *n, unsigned int indent);

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

const char *GNODE_TYPE_LBLS[] = {
    "NOP",
    
    "BOX",
    "SYNC",
    "FILTER",

    "COMB_STAR",
    "COMB_SPLIT",
    "COMB_PARALLEL",

    "EXTERN_CONNECTION"
};

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static void print_indent(unsigned int cols)
{
    for (unsigned int i=0; i < cols; i++) {
        printf("%c", INDENT_CHR);
    }
}

/*----------------------------------------------------------------------------*/

static void print_graph(const snet_gnode_t *n, unsigned int indent)
{
    while (n != NULL) {
        snet_gnode_contlink_t *lnk = (
            n->type == GRAPH_NODE_TYPE_NOP ?
            &n->data.nop->lnk : &n->data.normal->lnk);

        print_indent(indent);
        
        if (lnk->merge) {
            assert(lnk->node != NULL);

            printf(
                "N(%p, %s, merging_to(%p))\n",
                n, GNODE_TYPE_LBLS[n->type], lnk->node);

        } else {
            printf("N(%p, %s)\n", n, GNODE_TYPE_LBLS[n->type]);
        }
       
        switch (n->type) {
            case GRAPH_NODE_TYPE_COMB_STAR:         {
                snet_gnode_t *star_root =
                    n->data.normal->entity.star->root;

                print_graph(star_root, indent + INDENT_STEP);
                break;
            }

            case GRAPH_NODE_TYPE_COMB_SPLIT:        {
                snet_gnode_t *split_root =
                    n->data.normal->entity.split->root;

                print_graph(split_root, indent + INDENT_STEP);
                break;
            }

            case GRAPH_NODE_TYPE_COMB_PARALLEL:     {
                snet_gnode_t **branch_ptr = 
                    n->data.normal->entity.parallel->branches;

                unsigned int branches_cnt =
                    n->data.normal->entity.parallel->branches_cnt;

                for (unsigned int i=0; i < branches_cnt; i++, branch_ptr++) {
                    print_indent(indent + INDENT_STEP);

                    if (*branch_ptr != NULL) {
                        printf("BRANCH(%u)\n", i);

                        print_graph(
                            *branch_ptr, 
                            indent + INDENT_STEP + INDENT_STEP / 2);

                    } else {
                        printf("BRANCH(%u, <NULL>)\n", i);
                    }
                }

                break;
            }

            case GRAPH_NODE_TYPE_EXTERN_CONNECTION: {
                snet_domain_t *extern_snetd =
                    n->data.normal->entity.extern_conn->snetd;

                print_domain_graph(extern_snetd, indent + INDENT_STEP);
                break;
            }

            default: break;
        }

        n = (lnk->merge ? NULL : lnk->node);
    }
}

/*----------------------------------------------------------------------------*/

static void print_domain_graph(
    const snet_domain_t *snetd, unsigned int indent)
{
    if (snetd == NULL) {
        return;
    }

    snet_gnode_t *n = (snet_gnode_t *) SNetDomainGetGraphRoot(snetd);

    print_indent(indent);

    printf("DOMAIN(%p)\n", snetd);
    print_graph(n, indent + INDENT_STEP);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void graph_test(const snet_domain_t *snetd)
{
    print_domain_graph(snetd, 0);
    printf("\n\nDONE!!!\n\n");
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
