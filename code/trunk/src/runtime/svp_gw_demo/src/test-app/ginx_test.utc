#include "snet-gwrt.utc.h"
#include "snet-gwrt.int.utc.h"

/*---*/

#include <stdio.h>
#include <stdlib.h>

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static void print_ginx(const snet_ginx_t *ginx)
{
    if (SNetGInxIsInfinite(ginx)) {
        printf("<infinite>");
    }

    unsigned int ginx_len = SNetGInxGetLen(ginx);

    for (unsigned int i=0; i < ginx_len; i++) {
        printf("%ld", (long) SNetGInxGetItemValue(ginx, i));

        if (i < ginx_len - 1) {
            printf(".");
        }
    }
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void ginx_test(const snet_domain_t *snetd)
{
    snet_ginx_item_t ginx_init[] = { 100000, 20, 30, 40, 50 };

    snet_ginx_t *ginx0 = SNetGInxCreateFromStr(snetd, "0.0.0.0");
    snet_ginx_t *ginx1 = SNetGInxCreateFromStr(snetd, "1.-2.3.-4");
    snet_ginx_t *ginx2 = SNetGInxCreateFromArray(snetd, ginx_init, 5);
    snet_ginx_t *ginx3 = SNetGInxCreateFromStr(snetd, NULL);

    printf("%u: ", SNetGInxGetLen(ginx0)); print_ginx(ginx0); printf("\n");
    printf("%u: ", SNetGInxGetLen(ginx1)); print_ginx(ginx1); printf("\n");
    printf("%u: ", SNetGInxGetLen(ginx2)); print_ginx(ginx2); printf("\n");
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n");

    printf("\n/*---*/\n\n");

    SNetGInxSetValue(ginx0, ginx1, false);
    SNetGInxDestroy(ginx1);
    printf("%u: ", SNetGInxGetLen(ginx0)); print_ginx(ginx0); printf("\n\n");

    SNetGInxSetValueFromStr(ginx0, "3.1.1.1.1.1.1.1");
    printf("%u: ", SNetGInxGetLen(ginx0)); print_ginx(ginx0); printf("\n\n");

    SNetGInxSetValueFromStr(ginx0, "");
    printf("%u: ", SNetGInxGetLen(ginx0)); print_ginx(ginx0); printf("\n\n");

    SNetGInxSetValueFromArray(ginx3, ginx_init, 5);
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");

    printf("\n/*---*/\n\n");

    SNetGInxIncrItemValue(ginx2, 0, 10);
    printf("%u: ", SNetGInxGetLen(ginx2)); print_ginx(ginx2); printf("\n\n");

    SNetGInxDecrItemValue(ginx2, 0, 2);
    printf("%u: ", SNetGInxGetLen(ginx2)); print_ginx(ginx2); printf("\n\n");

    printf("\n/*---*/\n\n");

    printf(
        "Is ginx0 infinite : %u\n", 
        (unsigned int) SNetGInxIsInfinite(ginx0));

    SNetGInxSetToInfinite(ginx0);

    printf(
        "Is ginx0 infinite : %u\n", 
        (unsigned int) SNetGInxIsInfinite(ginx0));

    printf("\n/*---*/\n\n");

    SNetGInxConcat(ginx0, ginx3);
    printf("%u: ", SNetGInxGetLen(ginx0)); print_ginx(ginx0); printf("\n\n");

    SNetGInxConcat(ginx0, ginx0);
    printf("%u: ", SNetGInxGetLen(ginx0)); print_ginx(ginx0); printf("\n\n");

    SNetGInxConcat(ginx0, ginx0);
    printf("%u: ", SNetGInxGetLen(ginx0)); print_ginx(ginx0); printf("\n\n");

    
    SNetGInxSetToInfinite(ginx3);
    SNetGInxConcat(ginx0, ginx3);
    printf("%u: ", SNetGInxGetLen(ginx0)); print_ginx(ginx0); printf("\n\n");

    SNetGInxConcatStr(ginx3, "3.3.3.3.3");
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");

    SNetGInxConcatStr(ginx3, "-4.-4.-4.-4.-4");
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");

    SNetGInxConcatStr(ginx3, NULL);
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");

    SNetGInxConcatStr(ginx3, "");
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");

    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    SNetGInxConcatArray(ginx3, ginx_init, 5);
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");

    printf("\n/*---*/\n\n");

    char s_buf[256];   

    const char *s_dyn = SNetGInxToString(ginx3, NULL);
    const char *s_stat = SNetGInxToString(ginx3, s_buf);

    printf("%p:%u:%u: %s\n\n",
        s_dyn, SNetGInxGetLen(ginx3), strlen(s_dyn), s_dyn);

    printf("%p:%p:%u:%u: %s\n\n",
        s_stat, s_buf, SNetGInxGetLen(ginx3), strlen(s_stat), s_stat);

    SNetMemFree((void *) s_dyn);

    printf("\n/*---*/\n\n");

    SNetGInxChopLeft(ginx3, 10);
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");

    SNetGInxChopRight(ginx3, 10);
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");
    
    snet_ginx_t *ginx4 = SNetGInxCreateCopy(ginx3, false);

    SNetGInxChopLeft(ginx3, 10);
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");

    snet_ginx_t *ginx5 = SNetGInxCreateCopy(ginx3, false);

    SNetGInxChopRight(ginx3, 10);
    printf("%u: ", SNetGInxGetLen(ginx3)); print_ginx(ginx3); printf("\n\n");

    SNetGInxChopRight(ginx4, SNetGInxGetLen(ginx4));
    printf("%u: ", SNetGInxGetLen(ginx4)); print_ginx(ginx4); printf("\n\n");

    SNetGInxChopRight(ginx5, SNetGInxGetLen(ginx5));
    printf("%u: ", SNetGInxGetLen(ginx5)); print_ginx(ginx5); printf("\n\n");

    /*---*/

    SNetGInxDestroy(ginx0);
    SNetGInxDestroy(ginx2);
    SNetGInxDestroy(ginx3);
    SNetGInxDestroy(ginx4);
    SNetGInxDestroy(ginx5);
    
    /*---*/

    printf("\n/*---*/\n");
    printf("\n/*---*/\n\n");

    ginx0 = SNetGInxCreateFromStr(snetd, "1.0.4.1");
    ginx1 = SNetGInxCreateFromStr(snetd, "1.-2.3");

    snet_ginx_t *infimum     = SNetGInxCalcInfimum(ginx0, ginx1);
    snet_ginx_t *infimum_ext = SNetGInxCalcInfimumExt(ginx0, ginx1);

    printf("%u: ", SNetGInxGetLen(ginx0)); print_ginx(ginx0); printf("\n");
    printf("%u: ", SNetGInxGetLen(ginx1)); print_ginx(ginx1); printf("\n\n");
    
    printf("CMPRES       = %u\n", SNetGInxCompare(ginx0, ginx1));
    printf("CMPRES(ext)  = %u\n", SNetGInxCompareExt(ginx0, ginx1));

    printf("INFIMUM      = %u: ", SNetGInxGetLen(infimum));
    print_ginx(infimum);
    printf("\n");

    printf("INFIMUM(ext) = %u: ", SNetGInxGetLen(infimum_ext));
    print_ginx(infimum_ext);
    printf("\n\n");

    /*---*/

    SNetGInxDestroy(ginx0);
    SNetGInxDestroy(ginx1);

    SNetGInxDestroy(infimum);
    SNetGInxDestroy(infimum_ext);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
