#include "test.snet.utc.h"

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

const char *snet_test_labels[] = {
	"E__test__None",
	"a",
	"b",
	"c",
	"d",
	"e",
	"f",
	"T"
};

/*---*/

const char *snet_test_interfaces[] = {};

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static int SNet__test__A(snet_handle_t *hnd)
{
    //snet_record_t *rec = NULL;
    //void *field_a = NULL;

    //rec = SNetHndGetRecord(hnd);

    //field_a = SNetRecTakeField(rec, F__test__a);

    //SNetCall__A(hnd, field_a);

    printf("Executing box A\n");
    return 0;
}

/*----------------------------------------------------------------------------*/

static int SNet__test__B(snet_handle_t *hnd)
{
    //snet_record_t *rec = NULL;
    //void *field_b = NULL;

    //rec = SNetHndGetRecord(hnd);

    //field_b = SNetRecTakeField(rec, F__test__b);

    //SNetCall__B(hnd, field_b);

    printf("Executing box B\n");
    return 0;
}

/*----------------------------------------------------------------------------*/

static int SNet__test__C(snet_handle_t *hnd)
{
    //snet_record_t *rec = NULL;
    //void *field_c = NULL;

    //rec = SNetHndGetRecord(hnd);

    //field_c = SNetRecTakeField(rec, F__test__c);

    //SNetCall__C(hnd, field_c);

    printf("Executing box C\n");
    return 0;
}

/*----------------------------------------------------------------------------*/

static int SNet__test__D(snet_handle_t *hnd)
{
    //snet_record_t *rec = NULL;
    //void *field_d = NULL;

    //rec = SNetHndGetRecord(hnd);

    //field_d = SNetRecTakeField(rec, F__test__d);

    //SNetCall__D(hnd, field_d);

    printf("Executing box D\n");
    return 0;
}

/*----------------------------------------------------------------------------*/

static int SNet__test__E(snet_handle_t *hnd)
{
    //snet_record_t *rec = NULL;
    //void *field_e = NULL;

    //rec = SNetHndGetRecord(hnd);

    //field_e = SNetRecTakeField(rec, F__test__e);

    //SNetCall__E(hnd, field_e);

    printf("Executing box E\n");
    return 0;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static snet_gnode_t*
SNet__test___SL___SL(snet_gnode_t *in)
{
    snet_typeencoding_t *out_type = NULL;
    snet_box_sign_t     *out_sign = NULL;

    out_type = SNetTencTypeEncode(
    2, 
    SNetTencVariantEncode(
        SNetTencVectorCreate(1, F__test__b), 
        SNetTencVectorCreate(0), 
        SNetTencVectorCreate(0)), 
    SNetTencVariantEncode(
        SNetTencVectorCreate(1, F__test__b), 
        SNetTencVectorCreate(1, T__test__T), 
        SNetTencVectorCreate(0)));

    out_sign = SNetTencBoxSignEncode(
        out_type, 
        SNetTencVectorCreate(
            1, VARIANT_ITEM_TYPE_FIELD),
        SNetTencVectorCreate(
            2, VARIANT_ITEM_TYPE_FIELD, VARIANT_ITEM_TYPE_TAG));

    return SNetBox(in, &SNet__test__A, out_sign);
}

/*----------------------------------------------------------------------------*/

static snet_gnode_t*
SNet__test___SL___SR___SL(snet_gnode_t *in)
{
    snet_typeencoding_t *out_type = NULL;
    snet_box_sign_t     *out_sign = NULL;

    out_type = SNetTencTypeEncode(
        2,
        SNetTencVariantEncode(
            SNetTencVectorCreate(1, F__test__c), 
            SNetTencVectorCreate(0), 
            SNetTencVectorCreate(0)), 
        SNetTencVariantEncode(
            SNetTencVectorCreate(1, F__test__d), 
            SNetTencVectorCreate(0), 
            SNetTencVectorCreate(0)));

    out_sign = SNetTencBoxSignEncode(
        out_type, 
        SNetTencVectorCreate(
            1, VARIANT_ITEM_TYPE_FIELD),
        SNetTencVectorCreate(
            1, VARIANT_ITEM_TYPE_FIELD));

    return SNetBox(in, &SNet__test__B, out_sign);
}

/*----------------------------------------------------------------------------*/

static snet_gnode_t*
SNet__test___SL___SR___SR___PL(snet_gnode_t *in)
{
    snet_typeencoding_t *out_type = NULL;
    snet_box_sign_t     *out_sign = NULL;

    out_type = SNetTencTypeEncode(
        3, 
        SNetTencVariantEncode(
            SNetTencVectorCreate(1, F__test__b), 
            SNetTencVectorCreate(0), 
            SNetTencVectorCreate(0)), 
        SNetTencVariantEncode(
            SNetTencVectorCreate(1, F__test__b), 
            SNetTencVectorCreate(1, T__test__T), 
            SNetTencVectorCreate(0)), 
        SNetTencVariantEncode(
            SNetTencVectorCreate(1, F__test__e), 
            SNetTencVectorCreate(1, T__test__T), 
            SNetTencVectorCreate(0)));

    out_sign = SNetTencBoxSignEncode(
        out_type, 
        SNetTencVectorCreate(
            1, VARIANT_ITEM_TYPE_FIELD),
        SNetTencVectorCreate(
            2, VARIANT_ITEM_TYPE_FIELD, VARIANT_ITEM_TYPE_TAG),
        SNetTencVectorCreate(
            2, VARIANT_ITEM_TYPE_FIELD, VARIANT_ITEM_TYPE_TAG));

    return SNetBox(in, &SNet__test__C, out_sign);
}

/*----------------------------------------------------------------------------*/

static snet_gnode_t*
SNet__test___SL___SR___SR___PR(snet_gnode_t *in)
{
  snet_typeencoding_t *out_type = NULL;
  snet_box_sign_t     *out_sign = NULL;

  out_type = SNetTencTypeEncode(
    3, 
    SNetTencVariantEncode(
        SNetTencVectorCreate(1, F__test__b), 
        SNetTencVectorCreate(0), 
        SNetTencVectorCreate(0)), 
    SNetTencVariantEncode(
        SNetTencVectorCreate(1, F__test__b), 
        SNetTencVectorCreate(1, T__test__T), 
        SNetTencVectorCreate(0)), 
    SNetTencVariantEncode(
        SNetTencVectorCreate(1, F__test__e), 
        SNetTencVectorCreate(1, T__test__T), 
        SNetTencVectorCreate(0)));

    out_sign = SNetTencBoxSignEncode(
        out_type, 
        SNetTencVectorCreate(
            1, VARIANT_ITEM_TYPE_FIELD),
        SNetTencVectorCreate(
            2, VARIANT_ITEM_TYPE_FIELD, VARIANT_ITEM_TYPE_TAG),
        SNetTencVectorCreate(
            2, VARIANT_ITEM_TYPE_FIELD, VARIANT_ITEM_TYPE_TAG));

    return SNetBox(in, &SNet__test__D, out_sign);
}

/*----------------------------------------------------------------------------*/

static snet_gnode_t*
SNet__test___SL___SR___SR(snet_gnode_t *in)
{
    return SNetParallelDet(
        in, 
        SNetTencCreateTypeEncodingList(
            2, 
            SNetTencTypeEncode(
                1, 
                SNetTencVariantEncode(
                    SNetTencVectorCreate(1, F__test__c), 
                    SNetTencVectorCreate(0), 
                    SNetTencVectorCreate(0))), 
            SNetTencTypeEncode(
                1, 
                SNetTencVariantEncode(
                    SNetTencVectorCreate(1, F__test__d), 
                    SNetTencVectorCreate(0), 
                    SNetTencVectorCreate(0)))), 
        &SNet__test___SL___SR___SR___PL, 
        &SNet__test___SL___SR___SR___PR);
}

/*----------------------------------------------------------------------------*/

static snet_gnode_t*
SNet__test___SL___SR(snet_gnode_t *in)
{
    return SNetSerial(
        in, 
        &SNet__test___SL___SR___SL, 
        &SNet__test___SL___SR___SR);
}

/*----------------------------------------------------------------------------*/

static snet_gnode_t*
SNet__test___SL(snet_gnode_t *in)
{
    return SNetSerial(
        in, 
        &SNet__test___SL___SL, 
        &SNet__test___SL___SR);
}

/*----------------------------------------------------------------------------*/

static snet_gnode_t*
SNet__test___SR(snet_gnode_t *in)
{
    snet_typeencoding_t *out_type = NULL;
    snet_box_sign_t     *out_sign = NULL;

    out_type = SNetTencTypeEncode(
        1, 
        SNetTencVariantEncode(
            SNetTencVectorCreate(1, F__test__f), 
            SNetTencVectorCreate(0), 
            SNetTencVectorCreate(0)));

    out_sign = SNetTencBoxSignEncode(
        out_type, 
        SNetTencVectorCreate(1, VARIANT_ITEM_TYPE_FIELD));

    return SNetBox(in, &SNet__test__E, out_sign);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

snet_gnode_t* SNet__test___test(snet_gnode_t *in)
{
    return SNetSerial(in, &SNet__test___SL, &SNet__test___SR);
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

