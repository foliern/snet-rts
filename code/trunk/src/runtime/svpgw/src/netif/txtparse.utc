/*----------------------------------------------------------------------------*/
/*
      -------------------------------------------------------------------

              * * * * ! SVP S-Net Graph Walker Runtime ! * * * *

                  Computer Systems Architecture (CSA) Group
                            Informatics Institute
                        University Of Amsterdam  2008
                         
      -------------------------------------------------------------------

    File Name      : txtparse.utc

    File Type      : Code File

    ---------------------------------------

    File 
    Description    :

    Updates 
    Description    : N/A

*/
/*----------------------------------------------------------------------------*/

#include "txtparse.int.utc.h"

/*---*/

#include "core/record.int.utc.h"
#include "core/memmng.int.utc.h"

/*---*/

#include <sys/types.h>
#include <regex.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>

/*----------------------------------------------------------------------------*/

#define LINE_BUF_SZ      1024
#define REGX_MATCHBUF_SZ 7

/*---*/

#define REGX_EMPTYLN_PATTERN  \
    "^[[:space:]]+$"

/*---*/

#define REGX_USINGBLI_PATTERN        \
    "^[[:space:]]*using[[:space:]]+" \
    "interface[[:space:]]+([[:alnum:]]*)[[:space:]]*$"

/*---*/

#define REGX_BEGINREC_PATTERN            \
    "^[[:space:]]*begin[[:space:]]+"     \
    "record([[:space:]]*\\([[:space:]]*" \
    "([[:digit:]]+)[[:space:]]\\))?[[:space:]]*$"

/*---*/

#define REGX_ENDREC_PATTERN   \
    "^[[:space:]]*end[[:space:]]+record[[:space:]]*$"

/*---*/

#define REGX_RECITEM_PATTERN           \
    "^[[:space:]]*(btag|tag|field)"    \
    "[[:space:]]*\\{([[:alnum:]]*)\\}" \
    "[[:space:]]*(=[[:space:]]*((\".*\")|([[:digit:]]+))[[:space:]]*)?$"

/*----------------------------------------------------------------------------*/
/**
 * Helper macros for checking whether a regx is a match.
 *
 * Note that these macros use specific variable names that for which 
 * it is assumed that they have been declared within the scope the
 * macros are being used!
 */
#define REGEXEC(regx) \
    regexec(&regx, line_buf, REGX_MATCHBUF_SZ, match_buf, 0)

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/**
 * This structure holds the info related to the current
 * state of the parser that is needed to be accessed by
 * the parser's auxiliary functions.
 */

typedef struct {
    snet_netifcontext_t *netif_cntx;

    char                *line_buf;
    unsigned int         line_len;
    regmatch_t          *match_buf;

    snet_record_t       *rec;
    snet_bli_id_t        blid;
    
    unsigned int         line_cnt;
    unsigned int         rec_repeat_cnt;

} parse_context_t;

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static void
regerrorx(int code, const regex_t *regx)
{
    int   bufsz = regerror(code, regx, NULL, 0);
    char *buf   = (char *)(SNetMemAlloc((bufsz + 1) * sizeof(char)));

    regerror(code, regx, buf, bufsz);

    SNetReportNetIfError(SNET_NETIFERR_REGX, buf);
    SNetMemFree(buf);
    SNetOnError();
}

static bool
regcompx(regex_t *regx, const char *pattern)
{
    int errcode = regcomp(regx, pattern, REG_EXTENDED);

    if (errcode != 0) {
        regerrorx(errcode, regx);
        return false;
    }

    return true;
}

/*----------------------------------------------------------------------------*/

static inline void
file_error(const char *msg)
{
    SNetReportNetIfError(SNET_NETIFERR_FIO, "parsing", "input", msg);
    SNetOnError();
}

static inline void
syntax_error(unsigned int code, unsigned int lineno, const char *msg)
{
    SNetReportNetIfError(SNET_NETIFERR_SYNTAX, code, lineno, msg);
    SNetOnError();
}

/*----------------------------------------------------------------------------*/

//static const char*
//get_matched_substr(char *str, regmatch_t *match)
//{
//    if (str == NULL || match == NULL ||
//        match->rm_so == -1 || match->rm_eo == -1) {
//
//        return NULL;
//    }
//
//    if (str[match->rm_eo] != 0) {
//        str[match->rm_eo] = 0;
//    }
//
//    return str + match->rm_so;
//}

/*----------------------------------------------------------------------------*/

//static bool
//strtouint(const char *s, unsigned long max, unsigned int *val)
//{
//    char *endPtr = NULL;
//    unsigned long lval = strtoul(s, &endPtr, 10);
//
//    if (endPtr != NULL && (*endPtr) != 0) {
//        return false;
//    }
//
//    if (lval > max || errno == ERANGE) {
//        return false;
//    }
//
//    (*val) = (unsigned int)(lval);
//
//    return true;
//}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

static bool
set_blid(const parse_context_t *pcntx)
{
    //blid = SNetNetIfCntxGetBliLabelIndex(
    //    cntx, 
    //    get_matched_substr(line_buf, match_buf + 1));

    return false;
}

static bool
begin_record(const parse_context_t *pcntx)
{
    return false;
}

static bool
end_record(const parse_context_t *pcntx)
{
    return false;
}

/*----------------------------------------------------------------------------*/

static bool
add_record_item(const parse_context_t *pcntx)
{
    return false;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

thread void 
SNetNetIfTxtParse(snet_netifcontext_t *cntx)
{
    assert(cntx != NULL);
    assert(SNetNetIfCntxGetInputFileHandle(cntx) != NULL);

    regex_t regx_empty_line;
    regex_t regx_using_bli;
    regex_t regx_begin_rec;
    regex_t regx_end_rec;
    regex_t regx_rec_item;

    regcompx(&regx_empty_line, REGX_EMPTYLN_PATTERN);
    regcompx(&regx_using_bli,  REGX_USINGBLI_PATTERN);
    regcompx(&regx_begin_rec,  REGX_BEGINREC_PATTERN);
    regcompx(&regx_end_rec,    REGX_ENDREC_PATTERN);
    regcompx(&regx_rec_item,   REGX_RECITEM_PATTERN);

    char       line_buf[LINE_BUF_SZ];
    regmatch_t match_buf[REGX_MATCHBUF_SZ];

    FILE *fhnd        = SNetNetIfCntxGetInputFileHandle(cntx);
    bool  parse_error = false;

    parse_context_t pcntx = {
        cntx,
        line_buf,
        0,
        match_buf,
        NULL,
        (snet_bli_id_t)(0),
        0,
        0
    };

    while (fgets(line_buf, LINE_BUF_SZ, fhnd) != NULL) {
        pcntx.line_cnt++;
        pcntx.line_len = strlen(line_buf);

        if (line_buf[pcntx.line_len - 1] == '\n') {
            pcntx.line_len--;
            line_buf[pcntx.line_len] = 0;

        } else if (pcntx.line_len == LINE_BUF_SZ - 1) {
            file_error("Line too long");

            parse_error = true;
            break;
        }

        if (pcntx.line_len == 0) {
            continue;
        }

        if (REGEXEC(regx_empty_line) == 0) {
            continue;

        } else if (REGEXEC(regx_using_bli) == 0) {
            parse_error = set_blid(&pcntx);

        } else if (REGEXEC(regx_begin_rec) == 0) {
            parse_error = begin_record(&pcntx);

        } else if (REGEXEC(regx_end_rec)   == 0) {
            parse_error = end_record(&pcntx);

        } else if (REGEXEC(regx_rec_item)  == 0) {
            parse_error = add_record_item(&pcntx);

        } else {
            syntax_error(
                0x0001,
                pcntx.line_cnt,
                "Invalid token sequence");

            parse_error = true;
        }

        if (parse_error) {
            break;
        }
    }

    regfree(&regx_begin_rec);
    regfree(&regx_end_rec);
    regfree(&regx_rec_item);

    if (pcntx.rec != NULL)
        SNetRecDestroy(pcntx.rec);

    if (!feof(fhnd) && !parse_error) {
        file_error(strerror(errno));
    }
}

/*------------------------------- END OF FILE --------------------------------*/
/*----------------------------------------------------------------------------*/

