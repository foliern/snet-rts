#!/usr/bin/env python
from sys import argv, exit
from re import compile, match

tagStart = compile(r'<tag label="([^"]*)"[^>]*>')
tagEnd = compile(r'</tag>')
btagStart = compile(r'<btag label="([^"]*)"[^>]*>')
btagEnd = compile(r'</btag>')
fieldStart = compile(r'<field label="([^"]*)"[^>]*>')
fieldEnd = compile(r'</field>')
recordStart = compile(r'<record.*type="([^"]*)".*>')
recordEnd = compile(r'</record>')

class Record(object):
    def __init__(self, type_):
        self.type = type_
        self.tags = {}
        self.btags = {}
        self.fields = {}

    def __eq__(self, other):
        return (self.type == other.type and self.tags == other.tags and
                self.btags == other.btags and self.fields == other.fields)

    def __repr__(self):
      return ("Record {\n    Type: %s\n    Tags: %s\n    BTags: %s\n    " +
              "Fields: %s\n}") % (self.type, self.tags, self.btags, self.fields)



def grabFileContent(fileName):
    handle = open(fileName, 'r')
    fileContents = handle.read()
    handle.close()
    return fileContents

def splitIntoRecords(fileContents):
    record = None
    recordList = []
    name = ''
    value = ''
    fileContents = fileContents.replace('>', '>\n').replace('<', '\n<')

    for line in filter(lambda x: x != '', fileContents.splitlines()):
        if line == '<?xml version="1.0" ?>':
            continue

        elif recordStart.match(line):
            match = recordStart.match(line)
            record = Record(match.group(1))

        elif recordEnd.match(line):
            recordList.append(record)
            record = None

        elif tagStart.match(line):
            match = tagStart.match(line)
            name = match.group(1)

        elif tagEnd.match(line):
            record.tags[name] = value
            name = ''
            value = ''

        elif btagStart.match(line):
            match = btagStart.match(line)
            name = match.group(1)

        elif btagEnd.match(line):
            record.btags[name] = value
            name = ''
            value = ''

        elif fieldStart.match(line):
            match = fieldStart.match(line)
            name = match.group(1)

        elif fieldEnd.match(line):
            record.fields[name] = value
            name = ''
            value = ''

        else:
            value += line

    if record:
        recordList.append(record)

    return recordList

if len(argv) != 3:
    print "compare expects exactly 2 filename arguments"

file1 = splitIntoRecords(grabFileContent(argv[1]))
file2 = splitIntoRecords(grabFileContent(argv[2]))
missing = []

for record in file1:
    if record in file2:
        file2.remove(record)
    else:
        missing.append(record)

if len(missing) + len(file2) != 0:
    print "Results in %s and %s not identical!" % (argv[1], argv[2])

    if len(missing) != 0:
      print "Records in %s but not in %s:" % (argv[1], argv[2])
      for record in missing:
          print record

    if len(file2) != 0:
      print "Records in %s but not in %s:" % (argv[2], argv[1])
      for record in file2:
          print record

    exit(1)
