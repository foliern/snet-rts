module mandelbrot_simple;

#define XRES 800
#define YRES 800

#define DEPTH 254

use Structures: all;
use StdIO : all;

use sacprelude: {wrap};

use Fractal_module : all;
use SNetDisplay : all;

export all;

/* SDL ********************************************************************* */

void createDisplay( SNet::SNet &hnd)
{
  disp = initDisplay( [YRES,XRES]);
  SNet::out( hnd, 1, SNetDisplay::wrapSDLdisplay( DISPID, disp));
}

void displayImg( SNet::SNet &hnd, SDLdisplay d, color[YRES,XRES] rgbs)
{
  d = drawArray( d, rgbs);
  SNet::out( hnd, 1, SNetDisplay::wrapSDLdisplay( DISPID, d));
}

void displayImgAt( SNet::SNet &hnd, SDLdisplay d, color[.,.] rgbs, int tasks, int num)
{
  offs = [0, (YRES/tasks)*num];
  d = drawArrayOffset( d, rgbs, offs);
  SNet::out( hnd, 1, SNetDisplay::wrapSDLdisplay( DISPID, d));
}


/* split ******************************************************************* */

void schedule( SNet::SNet &hnd, int tasks)
{
  for( i=0; i<tasks; i++) {
    if( i == 0) {
      SNet::out( hnd, 2, tasks, i, 0);
    }
    else {
      SNet::out( hnd, 1, tasks, i);
    }
  }
}

void genSubPlane( SNet::SNet &hnd,  double[3] params, int tasks, int num)
{
  xc = params[0];
  yc = params[1];
  d = params[2];


  cmin = toc( xc - 0.5d * d, yc - 0.5d * d);
  cmax = toc( xc + 0.5d * d, yc + 0.5d * d);
  
  plane = genComplexArray( [YRES,XRES], cmin, cmax);
  
  sub_plane = drop( [(YRES/tasks)*num], 
                take( [(YRES/tasks)*(num+1)], plane));

  SNet::out( hnd, 1, Complex::wrapcomplex( CPXID, sub_plane), tasks, num);
}

void splitter( SNet::SNet &hnd, complex[.,.] plane, int tasks)
{
  for( i=0; i<tasks; i++) {
    sub_plane = drop( [(YRES/tasks)*i], 
                  take( [(YRES/tasks)*(i+1)], plane));
    if( i == 0) {
        SNet::out( hnd, 2, Complex::wrapcomplex( CPXID, sub_plane), tasks, i, 0);
    } 
    else {
        SNet::out( hnd, 1, Complex::wrapcomplex( CPXID, sub_plane), tasks, i);
    }
  }
}

void init( SNet::SNet &hnd, double[.,.] r, int tasks, int num, int first)
{
  if( tasks <= 1) {
    SNet::out( hnd, 2, wrap( r), 0);
  }
  else {
    res = with {
            ( [0,0] <= iv < [YRES/tasks, XRES]) : r[iv];
          } : genarray( [YRES,XRES], 0d);

    tracker = genarray( [tasks], false);
    tracker[num] = true;
    SNet::out( hnd, 1, wrap( res), wrap( tracker));  
  }
}

void merge( SNet::SNet &hnd, double[.,.] r, int tasks, 
                             int num, double[.,.] res, bool[.] tracker)
{
  nres = with {
           ([num*(YRES/tasks)] <= iv < [(num+1) * YRES/tasks]) : 
             r[ iv - num*(YRES/tasks)];
         } : modarray( res);
  tracker[num] = true;

  if( all( tracker)) {
    SNet::out( hnd, 2, wrap( nres), 0);
  }
  else {
    SNet::out( hnd, 1, wrap( nres), wrap( tracker));
  }
 }


/* pipe ******************************************************************** */

void genPlane( SNet::SNet &hnd,  double[3] params)
{
  xc = params[0];
  yc = params[1];
  d = params[2];


  cmin = toc( xc - 0.5d * d, yc - 0.5d * d);
  cmax = toc( xc + 0.5d * d, yc + 0.5d * d);
  
  plane = genComplexArray( [YRES,XRES], cmin, cmax);
  SNet::out( hnd, 1, Complex::wrapcomplex( CPXID, plane));
}

void escTime( SNet::SNet &hnd, complex[.,.] plane)
{
  ts = escapeTime( plane, DEPTH);
  SNet::out( hnd, 1, wrap( ts));
}

void escVals( SNet::SNet &hnd, complex[.,.] plane)
{
  tv = escapeValue( plane, DEPTH);
  SNet::out( hnd, 1, Complex::wrapcomplex( CPXID, tv));
}

void normItCount( SNet::SNet &hnd, int[.,.] ts, complex[.,.] tv)
{
  nvs = normalizedIterationCount( ts, tv);
  SNet::out( hnd, 1, wrap( nvs));
}

void toRGB( SNet::SNet &hnd, double[.,.] nvs)
{
  rgbs = doubleArrayToRGB( nvs);
  SNet::out( hnd, 1, Color8::wrapcolor( CID, rgbs));
}


/* simple ****************************************************************** */

void mandelbrot( SNet::SNet &hnd,  double[3] params)
{
  xc = params[0];
  yc = params[1];
  d = params[2];


  cmin = toc( xc - 0.5d * d, yc - 0.5d * d);
  cmax = toc( xc + 0.5d * d, yc + 0.5d * d);
  
  plane = genComplexArray( [YRES,XRES], cmin, cmax);

  ts = escapeTime( plane, DEPTH);
  vs  = escapeValue( plane, DEPTH);

  nvs = normalizedIterationCount( ts, vs);
  rgbs = doubleArrayToRGB( nvs);

  SNet::out( hnd, 1, Color8::wrapcolor( CID, rgbs));
}

