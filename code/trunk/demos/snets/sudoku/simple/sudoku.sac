module sudoku;

use Structures: all;
use StdIO: all;

export all;

/*******************************************************************************
 * 
 * Sudkou solver in SaC.
 *
 * This program tries to solve sudokus in a straight forward manner:
 * During the solving process, we store the state of our sudoku in two
 * arrays:
 *
 * - a 9x9 matrix 'set' of integers holding the numbers put down so far.
 * - a 9x9 matrix 'opts' of 9-element boolean vectors holding the possible
 *                       options for all positions.
 *
 * As soon as we place a number ( function 'addNumber'), we update the set
 * and opts arrays accordingly.
 *
 * The solution process requires back-tracking which is implemented by
 * recursion (function 'solve'). In order to keep the amount of back-
 * tracking to a minimum, we identify those positions with a minimum of
 * options first. The function 'findMinTrues' is used to that effect.
 */

int[*], bool[*] addNumber( int i, int j, int k, int[*] set, bool[*] opts)
{
  set[i,j] = k;
  k = k-1;
  i_q = (i/3)*3;
  j_q = (j/3)*3;
  opts = with {
          ([i,j,0] <= iv <= [i,j,8]) : false;
          ([i,0,k] <= iv <= [i,8,k]) : false;
          ([0,j,k] <= iv <= [8,j,k]) : false;
          ([i_q,j_q,k] <= iv <= [i_q+2,j_q+2,k]) : false;
  } : modarray( opts);

  return( set, opts);
}

int countTrues( bool[*] b)
{
  return( sum( toi( b)));
}

int findTrue( bool[.] b)
{
  i=0;
  while( !(b[i])) {
    i++;
  }
  return( i);
}

int, int findMinTrues( bool[*] opts)
{
  minCount = 9;
  min_i = 0;
  min_j = 0;

  for( i=0; i<9; i++) {
    for( j=0; j<9; j++) {
      if( (countTrues( opts[i,j]) < minCount)
          && (0 < countTrues( opts[i,j]))) {
        minCount = countTrues( opts[i,j]);
        min_i = i;
        min_j = j;
      }
    }
  }
  return( min_i, min_j);
}

bool isStuck( int[*] set, bool[*] opts)
{
  stuck = { [i,j] -> (set[i,j] == 0) && !any( opts[i,j]) };
  return( any( stuck));
}

bool isCompleted(  int[*] set)
{
  return( all(set != 0));
}

int[*], bool[*] solve( int[*] set, bool[*] opts)
{
  while( !( isStuck( set, opts) || isCompleted( set)) ) {
    i,j = findMinTrues( opts);
    if( countTrues( opts[i,j]) == 1) {
      set, opts = addNumber( i,j, findTrue( opts[i,j]) +1  ,set,opts);
    } else {
      /**
       * here, we need to place a number without being sure that it
       * is the correct one, i.e., we may need to back-track.
       * This is achieved by storing the actual state in 'mem_set'
       * and 'mem_opts', which are used within the for-loop that
       * actually successively tries all possible values until
       * a solution is found.
       */
      mem_set = set;
      mem_opts = opts;
      for( k=0; (k<9) && (!isCompleted(set)); k++) {
        if( mem_opts[i, j, k] ) {
          set, opts = addNumber( i, j, k+1, mem_set, mem_opts);
          set, opts = solve( set, opts);
        }
      }
    }
  }
  return( set, opts);
}


void solveOneLevel( SNet::SNet &hnd, int[*] board, bool[*] opts)
{
  if ( !isStuck( board, opts)
        && !isCompleted( board)) {
    i,j = findMinTrues( opts);
    mem_board = board;
    mem_opts = opts;
    for( k=1; (k<=9) && !isCompleted(board); k++) {
      if( mem_opts[i,j,k-1] ) {
        board, opts = addNumber( i, j, k,
                                  mem_board, mem_opts);
        if ( !isCompleted( board)) {
          SNet::outRaw( hnd, 1, sacprelude::wrap( board), sacprelude::wrap(opts));
        } else {
          SNet::outRaw( hnd, 2, sacprelude::wrap( board), 0);
        }
      }
    }
  }
}


/*
int[*], bool[*] solveOneLevel( int[*] board, bool[*] opts)
{
 if ( !isStuck( board, opts)  && !isCompleted( board)) {
	i,j = findMinTrues( opts);
	mem_board = board;
	mem_opts = opts;
	for( k=1; (k<=9) && !isCompleted(board); k++) {
		if( mem_opts[i,j,k-1] ) {
			board, opts = addNumber( i, j, k, mem_board, mem_opts);
		}
	}
  }

  if ( !(isCompleted( board)) && !(isStuck(board, opts))) {
   	resopts = opts;
  } 
  else {
  	resopts = false;
  }

  return( board, resopts);
}
*/

void computeOpts( SNet::SNet &hnd, int[*] board)
{ 
  set = genarray( [9,9], 0);
  opts = genarray( [9,9,9], true);


  for( i=0; i<9; i++) {
    for( j=0; j<9; j++) {
      if( board[i,j] > 0 ) {
        set, opts = addNumber( i,j, board[i,j],set,opts);
      }
    }
  }

  SNet::outRaw( hnd, 1, sacprelude::wrap( set), sacprelude::wrap( opts));
}
