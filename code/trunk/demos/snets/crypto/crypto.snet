/* 
 * A simple dictionary-based brute force cracker 
 *
 */

net crypto ({dictionary, entries, <dictionary_size>, <num_entries>, <num_nodes>, <num_branches>} -> {word, <entry>}|{<false>, <entry>})
{
	
	net task_divider ({entries, <num_entries>}->{password, salt, <entry>}) 
        {

		box split((entries, <entry>)->(password, salt, <entry>));

                net assigner {

                } connect [{<num_entries>} -> 
			               if <num_entries>1> 
                                         then 
				           {<entry = num_entries - 1>};
				           {<num_entries = num_entries - 1>}
			               else
				           {<entry=0>}
		          ];

	} connect assigner * {<entry>} .. split;

	net load_balancer ({<entry>,<num_nodes>,<num_branches>}->{<entry>,<node>,<branch>})
        {

        } connect [{<entry>,<num_nodes>,<num_branches>} -> {<entry>,<node = entry % num_nodes>,<branch = (entry / num_nodes) % num_branches>}]; 


	net cracker ({password, salt, dictionary, <dictionary_size>, <branch>}->{word,<branch>}|{<false>,<branch>})
        {

		box algorithm ((password, salt, dictionary, <dictionary_size>)->(word)|(<false>)); 

	} connect algorithm!<branch>;
	


} connect task_divider .. load_balancer .. cracker!@<node>;
