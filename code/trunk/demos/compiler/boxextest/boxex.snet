net compABC ({A} | {C} -> {P}, {B} -> {Q}) {
    box compA ((A) -> (P)) {
        <<< c |
            #include "compA.h"

            int compA() {
                printf("Hello compA\n");
                return 0;
            }
        >>>
    }
    box compB ((B) -> (Q));
    box compC ((C) -> (P)) {
        <<< c |
            #include "compC.h"

            int compC() {
                printf("Hello compC\n");
                return 0;
            }
        >>>
    }
}
connect compA || compB || compC;

net boxex {
    net split
    connect [{A,B,<T>} -> {A,<T>}; {B,<T>}];

    box examine((P,Q) -> (A,B) | (Y,Z)) {
        <<< java |
            import java.util.*;

            public class examine {
                public static void main(String args[]) {
                    System.out.println("Hello examine");
                    return 0;
                }
            }
        >>>
    }

    net compute {
        net compAB
        connect compABC;

        net syncPQ
        connect [|{P},{Q}|] ** ({P,Q});
    }
    connect ([{<T>} -> {}] .. compAB .. syncPQ) !! (<T>);
}
connect (tag .. split .. compute .. examine) ** ({Y,Z});
