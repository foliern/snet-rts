#include "SDLsac.h"
#include <stdlib.h>
#include <unistd.h>

typedef struct BUTTON {
  int num;
  int downX;
  int downY;
  int upX;
  int upY;
  struct BUTTON *next;
} button;

static button Buttons;

SDL_Thread *SDLsac_eventhandler = NULL;
SDL_mutex *SDLsac_mutex = NULL;
SDL_TimerID SDLsac_timer = NULL;

bool SDLsac_isasync;

static
void updateScreen( SDL_Surface  *surface)
{
  /*
   * accessing the display needs to be mutually exclusive
   */
  if (SDL_mutexP( SDLsac_mutex)==-1){
    SAC_RuntimeError( "Failed to lock the access mutex");
  }

  SDL_UpdateRect( surface, 0, 0, 0, 0);

  /*
   * accessing the display needs to be mutually exclusive
   */
  if (SDL_mutexV( SDLsac_mutex)==-1){
    SAC_RuntimeError( "Failed to unlock the access mutex");
  }
}

static
void appendButtonEvent( button *button)
{
  button *buttons = Buttons;

  while ( buttons->next != NULL){
  }
}

static
void addButtonEvent( int button, int dx, int dy, int ux, int uy)
{
  button *event = malloc( sizeof( button));
  event->num   = button;
  event->downX = dx;
  event->downY = dy;
  event->upX   = ux;
  event->upY   = uy;

  appendButtonEvent( event);
}

static 
int EventHandler( void *data)
{
#define BUTTONS 3;
  int downX[BUTTONS];
  int downY[BUTTONS];
  SDL_Event event;

  while ( 1) {
    if (SDL_WaitEvent( &event) == 1) {
      switch (event.type) {
        case SDL_QUIT:
          exit(10);
          break;
        case SDL_USEREVENT:
          updateScreen( (SDL_Surface *) event.user.data1);
          break;
      case SDL_MOUSEBUTTONDOWN:
        if ( event.button.button < BUTTONS){
          downX[event.button.button] = event.button.x;
          downY[event.button.button] = event.button.y;
        }
        break;
      case SDL_MOUSEBUTTONUP:
        if ( event.button.button < BUTTONS){
          addButtonEvent( event.button.button,
                          downX[event.button.button],
                          downX[event.button.button],
                          event.button.x,
                          event.button.y);
        }
        break;
        default:
          break;
      }
    }
  }
}

static
Uint32 TimerHandler(Uint32 interval, void *param) {
  SDL_Event event;
  SDL_UserEvent userevent;

  userevent.type = SDL_USEREVENT;
  userevent.code = 0;
  userevent.data1 = param;
  userevent.data2 = NULL;

  event.type = SDL_USEREVENT;
  event.user = userevent;

  SDL_PushEvent(&event);
  return(interval);
}


void initDisplay( SAC_ND_PARAM_out_nodesc( disp_nt, Display),
                  SAC_ND_PARAM_in( shp_nt, int),
                  SAC_ND_PARAM_in( async_nt, bool))
{
  SAC_ND_DECL__DATA( disp_nt, Display, )

  if (SDL_Init( SDL_INIT_VIDEO | SDL_INIT_TIMER) < 0) {
    SAC_RuntimeError( "Failed to init SDL System: %s", SDL_GetError());
  }
  
  atexit( SDL_Quit);

  SAC_ND_A_FIELD( disp_nt) = 
    SDL_SetVideoMode( SAC_ND_A_FIELD( shp_nt)[1], 
                      SAC_ND_A_FIELD( shp_nt)[0], 
                      32, SDL_HWSURFACE | SDL_ASYNCBLIT );

  if (SAC_ND_A_FIELD( disp_nt) == NULL) {
    SAC_RuntimeError( "Failed to init SDL Display: %s", SDL_GetError());
  }

  SDL_WM_SetCaption( "SaC SDL Output", NULL);

  SDLsac_isasync = SAC_ND_A_FIELD( async_nt);

  if( SDLsac_isasync) {
    /*
     * register an event handler 
     */ 
    SDLsac_eventhandler = SDL_CreateThread( EventHandler, NULL);
  
    /*
     * start a display update timer to update 20 times a second
     */
    SDLsac_timer = SDL_AddTimer( 5000, TimerHandler, SAC_ND_A_FIELD( disp_nt));
    if ( SDLsac_timer == NULL) {
      SAC_RuntimeError( "Failed to init update timer");
    }
  } 

  /*
   * and a shiny mutex as well
   */
  SDLsac_mutex = SDL_CreateMutex();

  * SAC_NAMEP( SAC_ND_A_FIELD( disp_nt)) = SAC_ND_A_FIELD( disp_nt);
  
  SAC_ND_DEC_RC_FREE( shp_nt, 1, )
}
